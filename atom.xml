<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[放飞梦想]]></title>
  <link href="http://mogoweb.github.io/atom.xml" rel="self"/>
  <link href="http://mogoweb.github.io/"/>
  <updated>2014-10-23T11:38:21+08:00</updated>
  <id>http://mogoweb.github.io/</id>
  <author>
    <name><![CDATA[mogoweb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的macos编程之旅]]></title>
    <link href="http://mogoweb.github.io/blog/2014/10/23/my-macos-programming-life/"/>
    <updated>2014-10-23T08:43:39+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/10/23/my-macos-programming-life</id>
    <content type="html"><![CDATA[<p>自从购入iMac后，这台水果机一直就是我的专属机。女人天生就对电脑这种科技产品心存畏惧，老婆一看这台电脑不是熟悉的Windows系统，就摸都不想摸。直到有一天，老婆拿了一个拷贝有儿子照片的U盘，要用这台iMac浏览一下照片，因为这台iMac的屏幕够大，显示效果也好。于是我就让位让她操作一下。我指点了一下如何插入U盘，如何打开U盘里的内容，剩下的就交给老婆大人操作了。带着Windows下的操作方式，老婆双击打开了一张图片。嗯，不错，打开了第一张照片，效果相当清晰细腻，色彩鲜艳，不禁赞叹了一句：苹果电脑还是不错的。然后&hellip;下一张，怎么浏览下一张图片？按右箭头没有用，界面上也没有浏览下一张的按钮。（注：默认是系统自带的“预览”程序）</p>

<p>我解释，苹果电脑要这么用：首先将要照片导入iPhoto，然后通过iPhoto浏览。老婆睁大眼睛，为什么要导入，我仅仅想浏览一下照片而已。我意识到，和她解释苹果软件的设计理念、照片管理的理论是徒劳的，于是我又告诉她一个新方法：选择所有照片，然后从右键菜单选择“打开”。老婆还是瞪着我：为什么要先选择所有照片？看到照片，第一反应就是双击打开它。我哑口无言&hellip;至此，老婆对苹果电脑的一点好感荡然无存。</p>

<p>我有点不服气，mac下的软件那么多，总有一款适合Mac新手，于是到mac appstore上去找图形图像类软件。本来苹果电脑就是以优秀的图形处理能力见长，所以各种图像处理软件琳琅满目，但很遗憾没找到一款功能足够简单，满足我的需求的软件。我在windows下常用的“光影看图”也没出Mac版。作为一个多年的程序员，当然不满足于这样一种结果。既然找不到这样的软件，就自己动手，风衣足食，好歹自己也是写程序维生的。某位国外大神级人物曾经有一个惊人的论调：每半年就要学习一门新的语言。对此我很惭愧，已经有多年围着C++/Java打转，没有去尝试学一门新的语言了。正好以此为契机，开始掌握一门新的技能吧。</p>

<p>Mac OS下开发，Objective-C是当仁不让的No.1，当然今年的兵器普上出现了新面孔Swift。考虑到我在C/C++圈子摸爬滚打了这么多年，估计用Objective C会更称手一些吧。而且Objective C发展了二十多年，一直由苹果独立支撑，竟然在编程语言兵器普上排在前几位，自然有其过人之处。好吧，就选它了。学习一门新的语言，一本经典的入门书籍那是必须的，经过大牛的推荐，我选择了&lt;&lt;Objective-C Programming &ndash; The Big Nerd Ranch Guide>>。</p>

<p>下面就开始我的mac os编程之旅吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读『MacTalk.人生元编程』]]></title>
    <link href="http://mogoweb.github.io/blog/2014/06/22/reading-about-macktalk/"/>
    <updated>2014-06-22T21:51:17+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/06/22/reading-about-macktalk</id>
    <content type="html"><![CDATA[<p>最先我是在多看上购买的电子版&lt;&lt;MacTalk.人生元编程>>，不久印刷版本也出来了。出于对这本书的喜爱，毫不犹豫的购买了印刷版本。为什么喜欢这本书，因为这本书写的有趣，我也希望我的博文写的有趣一点，可是翻出我以前和现在写的文章，都干巴巴的。不由的感叹，没有平日的文学修养，要将文章写的好真难。平日就欣赏那些语句优美的文章，碰上有文采、技术又出众的双料王，更是打心底佩服，自然要支持一下作者。</p>

<p>&lt;&lt;MacTalk.人生元编程>>是一本既有趣，又有不少干货的一本书。这本书的内容提要是这样概括这本书的:</p>

<p>『作者以一个70后程序员的笔触，立于Mac之上，讲述技术与人文的故事，有历史，有明天，有技术，有人生。70多篇文章划分为六大主题：Mac、程序员与编程、科技与人文、人物、工具、职场。篇篇独立成文，可拆可合，随时阅读。』</p>

<p>同样作为70后程序员，阅读这本随笔文笔容易引起共鸣（虽然地位悬殊，人家已经是院长，我还战斗在第一线）。有时读了某篇文章，不禁假想，要是我早几年读了它，是不是会走上另外一条路线。谈到这里，大家千万不要认为这是一本心灵鸡汤，作者只是以自己的经历、体会娓娓道来，从来不会将自己的观点强加于人。处在互联网这个乌烟瘴气的环境下，看到太多的争论与谩骂，不由令人心生悲观。好在还有池老师这样的技术专家，给浮躁的互联网吹进一丝清爽的凉风。本书最吸引我的地方在于文风幽默，我读过多个多个版本的Mac历史，这里是唯一写的既有趣，又让人涨见识的。关于职场与人生等话题，就如同一位老大哥在与你促膝长谈，不会给你讲为了祖国、为了人民这样的大道理，风趣而又能点中要害。</p>

<p>当然，这本书并非仅仅是一本IT人文书，中间还穿插了不少知识，主要是与Mac有关，此君也自称Mac君，算得上一名苹果公司免费的Mac布道师。文章并未涉及具体的编程知识，而是介绍一些提高效率的知识点。读了此书，Mac功力至少可以精进三层。另外，本文集还收录了VIM、Shell系列，同样适合linux程序员。在此书的发布会上，三表（微信公众号：三表龙门阵的作者）就打趣说，这本数应该拆成两本的，一本人文，一本技术，各取所需。</p>

<p>印刷版比电子版增加了职场系列、编程与写作等内容，这也算的上一份惊喜。印刷版的封面和正文版式都设计的简洁大方，并非仅仅将电子版印刷到纸张上。所以说，即使购买了电子版，再购买印刷版，丝毫不觉得吃亏，反而觉得物超所值。另外，如果您既不想花钱买印刷版，也不想花钱买电子版，可以上<a href="http://macshuo.com">http://macshuo.com</a>，可以免费阅读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Chromium WebView项目的源代码管理]]></title>
    <link href="http://mogoweb.github.io/blog/2014/06/19/about-source-management-of-chromium-webview/"/>
    <updated>2014-06-19T10:53:25+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/06/19/about-source-management-of-chromium-webview</id>
    <content type="html"><![CDATA[<p>chromium项目可谓开源项目集大成者，里面使用的第三方开源库数目高达60+。为了应对庞大的代码库管理问题，chromium项目引入了<a href="http://code.google.com/p/gclient/">gclient</a>，一套开源的代码管理方案。gclient是一套python脚本，用来简化多个git/svn源码库的管理。本文不探讨gclient的使用、配置，而是谈谈chromium webview项目是如何组织源码库的。</p>

<p>由于历史原因，chromium项目本身及许多第三方开源库采用的是SVN源码管理系统。SVN采用的是集中式管理，不如git那样能否方便的clone代码库。虽然google后来使用了git-svn等手段，为chromium和所有第三方开源库都做了git镜像库，但是如果需要获取某个release分支的代码，还是需要走svn（google也在不断改进，期望不久的将来，可以通过git获取某个release版本的源码）。</p>

<!--more-->


<p>基于chromium的开源项目有三种组织源码方案：</p>

<ol>
<li><a href="http://code.google.com/p/chromiumembedded">CEF</a>开源项目本身没有放chromium源码，只是提供了一套脚本，从google的服务器上去获取对应的源码，对chromium所做的修改以patch提交，同样提供了脚本应用这些patch。有了自动化脚本，开发人员其实也不关心代码托管在何处，项目组也可以省掉同步chromium源码的工作。但这种方案对项目组人员要求较高，必须要有扎实的脚本语言开发功底，每次对chromium的修改都必须做patch，也很考研开发人员的细致与耐心程度。</li>
<li><a href="https://www.codeaurora.org/xwiki/bin/Chromium+for+Snapdragon/WebHome">Chromium Browser for Snapdragon Project</a>开源项目为所有chromium及第三方开源库都做了git镜像，对chromium的修改直接提交到这些镜像库上。这种方案的优点是可控，非常适合企业内部开发，在企业内部部署，开发人员就无需每人都从外部下载，涉及到技术保密的提交也无需让外界知晓。但这种方案的缺点也是非常明显的，为60+个git库做镜像，有一定的工作量，还要定期同步，需要处理内部提交与外部提交合并问题。</li>
<li><a href="https://crosswalk-project.org/">crosswalk</a>开源项目只镜像了chromium/blink/v8等少量几个会修改的开源库，其它的库则从google的网站上取。这种方案在维护与便捷之间做了最佳平衡，因为chromium项目使用了大量的第三方开源库，但我们极少有需要去修改这些第三方开源库，处于定制和优化的目的，我们通常也只在chromium/blink库上修改代码。</li>
</ol>


<p>Chromium WebView项目采用了第三种方案，由于chromium和blink这两个库太庞大，屡次上传到github都失败，于是改成从crosswalk项目clone相关的代码库。所以在我的名下多了chromium-crosswalk, blink-crosswalk, v8-crosswalk这几个库，其实它们都是为chromium webview项目服务的，里面包含了crosswalk项目的代码，可以忽略之。</p>

<p>[注: 由于一些原因，在国内访问chromium的源码库不再顺畅了，免费的翻墙服务GAE也被屏蔽了，所以要同步代码，还需要购买商业的VPN，以保证网络是通畅的。您也可以从Chromium Browser for Snapdragon Project获取相关的git库，只要版本取的正确，可以同样使用。]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用pandoc和markdown书写文档]]></title>
    <link href="http://mogoweb.github.io/blog/2014/06/16/writing-document-with-pandoc-and-markdown/"/>
    <updated>2014-06-16T14:37:47+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/06/16/writing-document-with-pandoc-and-markdown</id>
    <content type="html"><![CDATA[<p>公司决定以后使用markdown+pandoc书写文档，于是就研究了一下markdown的写作（补充一下：markdown是一种标记语言，而pandoc则是转化工具）。虽然使用word书写文档得到大多数程序员的鄙视，但不得不承认，Word书写文档最直观，门槛最低。使用markdown+pandoc，各种问题层出不穷，以至于无法参照某一个文档搞定所有问题。在折腾了一天、google了各种中英文资料后，终于打通各路神仙。特此撰文一篇，如有雷同，纯属复制。</p>

<!-- more -->


<h2>什么是Markdown</h2>

<p>Markdown 是一种轻量级标记语言，它允许人们『使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”』。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。一份使用Markdown格式编写的文档应该可以直接以纯文本发布，而且看起来不会像是由许多标签惑是格式指令所构成。因此，Markdown的语法全由标点符号所组成，并经过严谨筛选，为了让它们看起来就像所要表达的意思。</p>

<p>Markdown语法请查看<a href="http://www.ituring.com.cn/article/504">Markdown语法说明（详解版）</a>, 或者完整的<a href="http://daringfireball.net/projects/markdown/syntax">Markdown语法</a>.</p>

<p>Markdown不是要来取代HTML，甚至也没有和它相似。它的语法种类不多，只和HTML的一部分有关。重点不是要创建一种更容易写作HTML文档的语法，Markdown的重点在于，它能让文档更容易阅读、编写。HTML是一种『发布』的格式，Markdown是一种『编写』的格式，因此，Markdown的格式语法只涵盖纯文本可以覆盖的范围。</p>

<p>不在Markdown涵盖范围之内的标签，都可以直接在文档里面用HTM撰写，不需要额外标注这是HTML或是Markdown。</p>

<h2>什么是pandoc</h2>

<p>Markdown自身的设计哲学决定了markdown并不适合编写复杂的文档。但各路大神都觉得markdown是个好东西，不够用怎么办，扩充呗。于是，我们可以看到github flavored markdown、multimarkdown、maruku等各路扩展。Markdown文档写完了，该如何展现给别人呢，总不至于丢给您的客户一个markdown文本文档，说您就将就着看吧。所以markdown文档最终还是会转换为html、word、pdf等格式，这时就需要一个强大的转换工具，不仅能转成各种格式，还需要转换的漂亮。</p>

<p>pandoc是开源界传说中的高帅富社区-haskell社区的作品，一方面它定义了markdown扩展，另一方面其转换功能强大的令人发指，支持众多的输入和输出格式（markdown只是其中一种）。使用</p>

<pre><code>pandoc --help
</code></pre>

<p>可以看到pandoc主要支持的输入与输出格式：</p>

<pre><code>input formats:  docbook, haddock, html, json, latex, markdown, markdown_github,
                markdown_mmd, markdown_phpextra, markdown_strict, mediawiki,
                native, opml, org, rst, textile
Output formats: asciidoc, beamer, context, docbook, docx, dzslides, epub, epub3,
                fb2, html, html5, icml, json, latex, man, markdown,
                markdown_github, markdown_mmd, markdown_phpextra,
                markdown_strict, mediawiki, native, odt, opendocument, opml,
                org, pdf*, plain, revealjs, rst, rtf, s5, slideous, slidy,
                texinfo, textile
                [*for pdf output, use latex or beamer and -o FILENAME.pdf]
</code></pre>

<p>上述语言的互转关系，可以看看作者制作的<a href="http://johnmacfarlane.net/pandoc/diagram.png">这份壮观的图</a>，从中可以看出Pandoc的强大。这年头，哲学系教授会写程序，还是Haskell，伤不起啊:D</p>

<h2>Ubuntu环境配置篇</h2>

<p>主机环境：Ubuntu 12.04 LTS 64位</p>

<h3>markdown编辑器</h3>

<p>因为是纯文本格式写作，理论上任何文本编辑器，如VIM、gedit，都可以胜任此项工作。不过考虑到大多数人希望所见及所得的编辑效果（要不Microsoft Word就不会这么流行了），还是推荐使用具有图形界面并带预览功能的编辑器，如ubuntu下的retext。</p>

<h4>retext</h4>

<pre><code>1. sudo apt-get install retext
2. retext&amp;
3. 界面如下图所示：
</code></pre>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_retext_markdown_ui.png" alt="retext ui" /></p>

<h3>安装pandoc</h3>

<pre><code>sudo apt-get autoremove pandoc      #删掉之前的pandoc安装
sudo apt-get install cabal-install  #安装Haskell包管理器
cabal update                        #获取Haskell包信息
cabal install pandoc                #通过cabal安装pandoc
</code></pre>

<p>然后再把~/.cabal加到路径中去，在.bashrc里加上一句</p>

<pre><code>export PATH=$HOME/.cabal/bin:$PATH
</code></pre>

<p>如果在安装过程中出现：</p>

<pre><code>setup: The program alex is required but it could not be found.
cabal: Error: some packages failed to install:
pandoc-1.12.4.2 failed during the configure step. The exception was:
ExitFailure 1
</code></pre>

<p>执行如下命令安装软件包</p>

<pre><code>cabal install alex
cabal install happy
</code></pre>

<p>如果安装pandoc仍提示错误，修改环境变量：</p>

<pre><code>export PATH=/home/alex/.cabal/bin:$PATH
</code></pre>

<h3>安装之后的校验</h3>

<p>打开Shell，输入：</p>

<pre><code>pandoc --version
</code></pre>

<p>如果安装无误，应能看到pandoc相关的作者、版权、序列许可等信息。</p>

<h3>安装LaTex</h3>

<pre><code>sudo apt-get install texlive texlive-latex-extra texlive-latex-recommended texlive-xetex
</code></pre>

<p>这个过程会下载大约七八百兆的包，可以先喝杯咖啡，活动一下筋骨。</p>

<h3>安装中文字体</h3>

<p>可以用“fc-list&#8221;命令查看已安装字体。如果没有中文字体，或者缺少某些中文字体，使用如下命令安装gnome中文字体。</p>

<pre><code>apt-get install apt-get install language-pack-gnome-zh*
</code></pre>

<p>如果有ttf文件，比如Windows的字体文件在（Windows fonts）下，双击即可安装。</p>

<h3>输出pdf格式</h3>

<pre><code>pandoc  test.markdown -o test.pdf --latex-engine=xelatex -V mainfont=文泉驿微米黑
</code></pre>

<p>需要注意，mainfont需要指定系统存在的字体，否则中文会变成空格。</p>

<h3>设定边界、中文换行</h3>

<p>使用前一步骤生成的pdf文件，边界过大，中文换行也存在问题，这时需要pandoc模板上场了。其实系统中已经存在针对不同格式转换的模板了，位于$HOME/.cabal/share/pandoc-1.12.4.2/data/templates下，针对lextex的模板为default.latex。可以修改这个系统模板，也可以自己创建一个，然后在执行pandoc时指定模板。建议采用自定义模板的方式，针对不同的格式要求定义模板。以下就是我定义的模板文件template.tex:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\documentclass[$if(fontsize)$$fontsize$,$endif$$if(lang)$$lang$,$endif$$if(papersize)$$papersize$,$endif$$for(classoption)$$classoption$$sep$,$endfor$]{$documentclass$}
</span><span class='line'>\usepackage{geometry}       % 設定邊界
</span><span class='line'>\geometry{
</span><span class='line'>  top=1in,
</span><span class='line'>  inner=1in,
</span><span class='line'>  outer=1in,
</span><span class='line'>  bottom=1in,
</span><span class='line'>  headheight=3ex,
</span><span class='line'>  headsep=2ex
</span><span class='line'>}
</span><span class='line'>$if(fontfamily)$
</span><span class='line'>\usepackage{$fontfamily$}
</span><span class='line'>$else$
</span><span class='line'>\usepackage{lmodern}
</span><span class='line'>$endif$
</span><span class='line'>$if(linestretch)$
</span><span class='line'>\usepackage{setspace}
</span><span class='line'>\setstretch{$linestretch$}
</span><span class='line'>$endif$
</span><span class='line'>\usepackage{amssymb,amsmath}
</span><span class='line'>\usepackage{ifxetex,ifluatex}
</span><span class='line'>\usepackage{fixltx2e} % provides \textsubscript
</span><span class='line'>\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
</span><span class='line'>  \usepackage[T1]{fontenc}
</span><span class='line'>  \usepackage[utf8]{inputenc}
</span><span class='line'>$if(euro)$
</span><span class='line'>  \usepackage{eurosym}
</span><span class='line'>$endif$
</span><span class='line'>\else % if luatex or xelatex
</span><span class='line'>  \usepackage{fontspec}     % 允許設定字體
</span><span class='line'>  \usepackage{xeCJK}        % 分開設置中英文字型
</span><span class='line'>  \setCJKmainfont{文泉驿微米黑}    % 設定中文字型
</span><span class='line'>  \setmainfont{Droid Serif}     % 設定英文字型
</span><span class='line'>  \setromanfont{Droid Serif}    % 字型
</span><span class='line'>  \setmonofont{Droid Sans Mono}
</span><span class='line'>  \linespread{1.2}\selectfont   % 行距
</span><span class='line'>  \XeTeXlinebreaklocale "zh"    % 針對中文自動換行
</span><span class='line'>  \XeTeXlinebreakskip = 0pt plus 1pt % 字與字之間加入0pt至1pt的間距，確保左右對整齊
</span><span class='line'>  \parindent 0em        % 段落縮進
</span><span class='line'>  \setlength{\parskip}{20pt}    % 段落之間的距離
</span><span class='line'>  \ifxetex
</span><span class='line'>    \usepackage{xltxtra,xunicode}
</span><span class='line'>  \defaultfontfeatures{Mapping=tex-text,Scale=MatchLowercase}
</span><span class='line'>  \newcommand{\euro}{€}
</span><span class='line'>$if(mainfont)$
</span><span class='line'>    \setmainfont{$mainfont$}
</span><span class='line'>$endif$
</span><span class='line'>$if(sansfont)$
</span><span class='line'>    \setsansfont{$sansfont$}
</span><span class='line'>$endif$
</span><span class='line'>$if(monofont)$
</span><span class='line'>    \setmonofont[Mapping=tex-ansi]{$monofont$}
</span><span class='line'>$endif$
</span><span class='line'>$if(mathfont)$
</span><span class='line'>    \setmathfont(Digits,Latin,Greek){$mathfont$}
</span><span class='line'>$endif$
</span><span class='line'>\fi
</span><span class='line'>% use upquote if available, for straight quotes in verbatim environments
</span><span class='line'>\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
</span><span class='line'>% use microtype if available
</span><span class='line'>\IfFileExists{microtype.sty}{\usepackage{microtype}}{}
</span><span class='line'>$if(geometry)$
</span><span class='line'>\usepackage[$for(geometry)$$geometry$$sep$,$endfor$]{geometry}
</span><span class='line'>$endif$
</span><span class='line'>$if(natbib)$
</span><span class='line'>\usepackage{natbib}
</span><span class='line'>\bibliographystyle{$if(biblio-style)$$biblio-style$$else$plainnat$endif$}
</span><span class='line'>$endif$
</span><span class='line'>$if(biblatex)$
</span><span class='line'>\usepackage{biblatex}
</span><span class='line'>$if(biblio-files)$
</span><span class='line'>\bibliography{$biblio-files$}
</span><span class='line'>$endif$
</span><span class='line'>$endif$
</span><span class='line'>$if(listings)$
</span><span class='line'>\usepackage{listings}
</span><span class='line'>$endif$
</span><span class='line'>$if(lhs)$
</span><span class='line'>\lstnewenvironment{code}{\lstset{language=Haskell,basicstyle=\small\ttfamily}}{}
</span><span class='line'>$endif$
</span><span class='line'>$if(highlighting-macros)$
</span><span class='line'>$highlighting-macros$
</span><span class='line'>$endif$
</span><span class='line'>$if(verbatim-in-note)$
</span><span class='line'>\usepackage{fancyvrb}
</span><span class='line'>$endif$
</span><span class='line'>$if(tables)$
</span><span class='line'>\usepackage{longtable,booktabs}
</span><span class='line'>$endif$
</span><span class='line'>$if(graphics)$
</span><span class='line'>\usepackage{graphicx}
</span><span class='line'>\makeatletter
</span><span class='line'>\def\maxwidth{\ifdim\Gin@nat@width&gt;\linewidth\linewidth\else\Gin@nat@width\fi}
</span><span class='line'>\def\maxheight{\ifdim\Gin@nat@height&gt;\textheight\textheight\else\Gin@nat@height\fi}
</span><span class='line'>\makeatother
</span><span class='line'>% Scale images if necessary, so that they will not overflow the page
</span><span class='line'>% margins by default, and it is still possible to overwrite the defaults
</span><span class='line'>% using explicit options in \includegraphics[width, height, ...]{}
</span><span class='line'>\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
</span><span class='line'>$endif$
</span><span class='line'>\ifxetex
</span><span class='line'>  \usepackage[setpagesize=false, % page size defined by xetex
</span><span class='line'>              unicode=false, % unicode breaks when used with xetex
</span><span class='line'>              xetex]{hyperref}
</span><span class='line'>\else
</span><span class='line'>  \usepackage[unicode=true]{hyperref}
</span><span class='line'>\fi
</span><span class='line'>\hypersetup{breaklinks=true,
</span><span class='line'>            bookmarks=true,
</span><span class='line'>            pdfauthor={$author-meta$},
</span><span class='line'>            pdftitle={$title-meta$},
</span><span class='line'>            colorlinks=true,
</span><span class='line'>            citecolor=$if(citecolor)$$citecolor$$else$blue$endif$,
</span><span class='line'>            urlcolor=$if(urlcolor)$$urlcolor$$else$blue$endif$,
</span><span class='line'>            linkcolor=$if(linkcolor)$$linkcolor$$else$magenta$endif$,
</span><span class='line'>            pdfborder={0 0 0}}
</span><span class='line'>\urlstyle{same}  % don't use monospace font for urls
</span><span class='line'>$if(links-as-notes)$
</span><span class='line'>% Make links footnotes instead of hotlinks:
</span><span class='line'>\renewcommand{\href}[2]{#2\footnote{\url{#1}}}
</span><span class='line'>$endif$
</span><span class='line'>$if(strikeout)$
</span><span class='line'>\usepackage[normalem]{ulem}
</span><span class='line'>% avoid problems with \sout in headers with hyperref:
</span><span class='line'>\pdfstringdefDisableCommands{\renewcommand{\sout}{}}
</span><span class='line'>$endif$
</span><span class='line'>\setlength{\parindent}{0pt}
</span><span class='line'>\setlength{\parskip}{6pt plus 2pt minus 1pt}
</span><span class='line'>\setlength{\emergencystretch}{3em}  % prevent overfull lines
</span><span class='line'>$if(numbersections)$
</span><span class='line'>\setcounter{secnumdepth}{5}
</span><span class='line'>$else$
</span><span class='line'>\setcounter{secnumdepth}{0}
</span><span class='line'>$endif$
</span><span class='line'>$if(verbatim-in-note)$
</span><span class='line'>\VerbatimFootnotes % allows verbatim text in footnotes
</span><span class='line'>$endif$
</span><span class='line'>$if(lang)$
</span><span class='line'>\ifxetex
</span><span class='line'>  \usepackage{polyglossia}
</span><span class='line'>  \setmainlanguage{$mainlang$}
</span><span class='line'>\else
</span><span class='line'>  \usepackage[$lang$]{babel}
</span><span class='line'>\fi
</span><span class='line'>$endif$
</span><span class='line'>
</span><span class='line'>$if(title)$
</span><span class='line'>\title{$title$}
</span><span class='line'>$endif$
</span><span class='line'>$if(subtitle)$
</span><span class='line'>\subtitle{$subtitle$}
</span><span class='line'>$endif$
</span><span class='line'>$if(author)$
</span><span class='line'>\author{$for(author)$$author$$sep$ \and $endfor$}
</span><span class='line'>$endif$
</span><span class='line'>$if(date)$
</span><span class='line'>\date{$date$}
</span><span class='line'>$endif$
</span><span class='line'>$for(header-includes)$
</span><span class='line'>$header-includes$
</span><span class='line'>$endfor$
</span><span class='line'>
</span><span class='line'>\begin{document}
</span><span class='line'>$if(title)$
</span><span class='line'>\maketitle
</span><span class='line'>$endif$
</span><span class='line'>$if(abstract)$
</span><span class='line'>\begin{abstract}
</span><span class='line'>$abstract$
</span><span class='line'>\end{abstract}
</span><span class='line'>$endif$
</span><span class='line'>
</span><span class='line'>$for(include-before)$
</span><span class='line'>$include-before$
</span><span class='line'>
</span><span class='line'>$endfor$
</span><span class='line'>$if(toc)$
</span><span class='line'>{
</span><span class='line'>\hypersetup{linkcolor=black}
</span><span class='line'>\setcounter{tocdepth}{$toc-depth$}
</span><span class='line'>\tableofcontents
</span><span class='line'>}
</span><span class='line'>$endif$
</span><span class='line'>$body$
</span><span class='line'>
</span><span class='line'>$if(natbib)$
</span><span class='line'>$if(biblio-files)$
</span><span class='line'>$if(biblio-title)$
</span><span class='line'>$if(book-class)$
</span><span class='line'>\renewcommand\bibname{$biblio-title$}
</span><span class='line'>$else$
</span><span class='line'>\renewcommand\refname{$biblio-title$}
</span><span class='line'>$endif$
</span><span class='line'>$endif$
</span><span class='line'>\bibliography{$biblio-files$}
</span><span class='line'>
</span><span class='line'>$endif$
</span><span class='line'>$endif$
</span><span class='line'>$if(biblatex)$
</span><span class='line'>\printbibliography$if(biblio-title)$[title=$biblio-title$]$endif$
</span><span class='line'>
</span><span class='line'>$endif$
</span><span class='line'>$for(include-after)$
</span><span class='line'>$include-after$
</span><span class='line'>
</span><span class='line'>$endfor$
</span><span class='line'>\end{document}</span></code></pre></td></tr></table></div></figure>


<p>使用如下命令生成pdf文档：</p>

<pre><code>pandoc test.md -o test.pdf --latex-engine=xelatex --template=/home/alex/template.tex
</code></pre>

<h2>参考文档</h2>

<ol>
<li><a href="http://www.cnblogs.com/liuyangnuts/archive/2013/04/23/3038354.html">让pandoc输出pdf时支持中文</a></li>
<li><a href="http://www.yangzhiping.com/tech/pandoc.html">Markdown写作进阶：Pandoc入门浅谈</a></li>
<li><a href="http://johnmacfarlane.net/pandoc/demo/example3.html">Pandoc User’s Guide</a></li>
<li><a href="http://stackoverflow.com/">stackoverflow</a></li>
<li><a href="http://blog.csdn.net/phodal/article/details/23381821">pandoc 用markdown写毕业论文 markdown转pdf,docx</a></li>
<li><a href="http://higrid.net/c-art-pandoc_command.htm">利用Pandoc转换markdown和HTML、LaTeX</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于chromium_webview项目]]></title>
    <link href="http://mogoweb.github.io/blog/2014/06/10/about-chromium-webview-project/"/>
    <updated>2014-06-10T08:56:06+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/06/10/about-chromium-webview-project</id>
    <content type="html"><![CDATA[<p>chromium_webview的目标是在chromium核心的基础上提供Android WebView API全兼容的接口，希望达到的效果是基于Android WebView API开发的应用程序，只需将android.webkit包名替换为com.mogoweb.chrome即可完成从WebKit内核到Chromium内核的迁移。目标支持平台为Android 4.0以上。项目地址：<a href="https://github.com/mogoweb/chromium_webview">https://github.com/mogoweb/chromium_webview</a>。</p>

<h2>项目的起源</h2>

<p>从2011年开始，我转向从事chromium的定制化工作。2012年在移动手机平台上开发了一款浏览器Browser1.0，基于WebKit内核和Android WebView API。2012年下半年开始进行chromium的移植工作，其时google发布了Chrome for Android的第一个版本V0.16，还是beta版本。虽然浏览器的内核发生了很大的变化，但是我们期望上层的代码不需要做修改，于是在Content API的基础上，按照Android WebView API进行接口封装。最后做出来的浏览器美其名曰“双内核”，也就是WebKit加Chromium双内核。</p>

<!--more-->


<p>由于Chromium渲染架构的缘故，在Content API之上封装的WebView API还存在问题：</p>

<ol>
<li>为了启用硬件加速，chromium for android引入了SurfaceView，但SurfaceView动态添加会引起黑屏。所以SurfaceView必须在应用程序的初始化代码中添加，不能象Android WebView那样随心所欲的使用。</li>
<li>采用了多进程架构，后果之一就是内存狂飙，更让人难以接受的是，访问新浪首页这样复杂的网页，还不如WebKit浏览器流畅。</li>
</ol>


<p>在我们移植chromium的同时，google的工程师也没闲着，chromium代码下面开始出现android_webview的代码，接着代码越来越多，更新的也越来越频繁。有一天，在github上看到一个项目：<a href="https://github.com/pwnall/chromeview">ChromeView Project</a>。这正是我所需要的基于chromium的WebView API封装,但这哥们估计也没啥闲功夫，项目好久都没有更新。于是我就在github上创建了chromium_webview项目，早期的AwContents实现是软件渲染，所以效率低下。</p>

<p>时间推到2013年11月，Android 4.4发布，其中很大的一个变化就是使用chromium替换了原来的webkit引擎。于是我又开始哼哧哼哧研究起AOSP中的Chromium WebView实现，研究了AOSP中的Chromium WebView实现后，定下了如下策略：</p>

<ol>
<li>照搬WebViewChromium及相关代码，如果代码中使用了未公开的API，使用反射机制实现。</li>
<li>启用光栅化位图，消除对GraphicBuffer的依赖，从而不依赖系统的未公开C++接口。</li>
</ol>


<p>经过一段时间的工作，chromium webview项目终于完整支持硬件加速。</p>

<h2>Chromium WebView的应用场景</h2>

<p>有人要说了，现在Android系统都已经采用chromium引擎了，你还费老大劲整出这玩意儿，是不是吃饱了撑了。的确，做这个事情没给我带来一毛钱经济上的收益，反而搭进了我的业余休息时间，我做这件事的动力来自：</p>

<ol>
<li>Android WebView采用chromium引擎不假，但那也得4.4及以上的版本。</li>
<li>使用系统的WebView，失去了定制能力，比如要添加一个HTML标签就比较难。</li>
<li>提高水平，结交朋友。</li>
</ol>


<p>早些年做《无线城市》项目时，就发现Hybrid App还是有一些市场的。但使用系统的WebView可能存在性能低下、兼容性不良、无法定制的问题。所以chromium webview的最佳应用场景就是集成到APP作为渲染引擎，此外开发浏览器也是一个选择。</p>

<h2>Chromium WebView存在的问题</h2>

<p>Chromium WebView刚完成了初步的移植，问题还非常多，在后续的时间，将会继续完善。目前看来，仍然有几大难题难以解决：</p>

<ol>
<li>由于渲染架构的原因，在Android 4.0 &amp; Android 4.0.3上还只能使用软件方式渲染；</li>
<li>光栅化位图的效率似乎比GraphicBuffer的效率低一些，长网页或复杂网页在快速滚动时，会出现短暂的白屏。</li>
</ol>


<h2>后续计划</h2>

<ol>
<li>完善Chromium WebView API，修复BUG</li>
<li>开启WebGL支持</li>
<li>精简内核，优化内存占用</li>
<li>将开源浏览器TintBrowser改成使用Chromium WebView，证明基于WebView API的应用能够无缝迁移到Chromium WebView。</li>
</ol>


<h2>更新</h2>

<p>2014-08-18</p>

<p>完成TintBrowser在Chromium WebView上的适配，并修改了若干UI，命名为365浏览器，已经在腾讯开放平台上上架，你可以从<a href="http://android.myapp.com/myapp/detail.htm?apkName=com.mogoweb">这里</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用iPhoto和微云管理照片]]></title>
    <link href="http://mogoweb.github.io/blog/2014/05/25/using-iphoto-and-weiyun-to-manage-photos/"/>
    <updated>2014-05-25T07:35:09+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/05/25/using-iphoto-and-weiyun-to-manage-photos</id>
    <content type="html"><![CDATA[<p>自从上次移动硬盘损坏，丢失了不少珍贵的照片，一直心有余悸，现在保存资料都会进行双备份。近一两年，云存储市场风起云涌，越来越多的企业加入战团。不仅免费，而且容量越来越大。当腾讯宣布微云免费容量10T后，我毫不犹豫的就申请了一个账号，将资料都保存在云端（基本上是一些照片和视频，对于普通老百姓，隐私从来都不是大事），形成本地和云端双保险。喜上加喜，近期新入手了一台iMac，Mac OS自带的iPhoto应用程序让人爱不释手，管理照片起来非常方便，可以直接导入RAW文件，还提供简单的编辑功能。但iPhoto通常是将相机照片导入到自己的库中，这样会出现iPhoto和微云两套照片，有点浪费空间。在琢磨了一段时间后，总结了一套自己的照片管理方法。</p>

<!--more-->


<p>首先，在微云文件夹里面，还是按照手工的方式整理文件夹，基本的目录命名原则是第一层目录为年份，在年份下面再根据日期和事件（或地点）建立子文件夹。单反拍的照片用RAW格式存储，将SD卡取下来，接到电脑上，将其中的照片文件复制到对应的子文件夹。这一步完成了数码照片在微云上的存储。RAW格式虽然方便后期处理，但是浏览起来不太方便，如果要发布到网上，或者传给他人，还是需要转成jpg格式才行，这时就需要iPhoto上场了。</p>

<p>接下来，打开iPhoto，点选菜单项“iPhoto ｜ 偏好设置“，在弹出的界面，点击“高级”选项卡，去掉“将项目拷贝到iPhoto图库“前面的勾，如下图所示：</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_iphoto_preferences.png" alt="偏好设置" /></p>

<p>修改这一设置的目的是不用将原始的RAW文件复制到iPhoto库，节省空间。然后点选菜单项“文件 ｜ 导入到图库“，选择微云目录下的照片，完成导入。这样如果要浏览照片，就可以在iPhoto中进行，大部分照片可以进行简单的修饰。如果需要复杂的修饰处理，可以打开PhotoShop，对微云下的RAW格式文件进行处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromium网络加载速度研究(2)]]></title>
    <link href="http://mogoweb.github.io/blog/2014/04/03/chromium-loading-spped-research-1/"/>
    <updated>2014-04-03T18:10:06+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/04/03/chromium-loading-spped-research-1</id>
    <content type="html"><![CDATA[<p>本文主要内容翻译自chromium的文档<a href="http://www.chromium.org/developers/design-documents/network-stack/netlog">NetLog: Chrome’s network logging system</a>，如果您觉得文章写的不明白，请参看原文。</p>

<p>通过&lt;&lt;<a href="http://mogoweb.github.io/blog/2014/03/18/chromium-loading-speed-research-0/">Chromium网络加载速度研究(1)</a>>>这篇文章的分析，可以得出结论，云端加速是高富帅的玩法。对于个人开发者和小公司而言，是没有那个实力去部署强大的数据中心的。所以接下来还得继续研究，看看有没有其它的途径提高网页加载速度。在着手优化之前，我们需要一个profiling手段找出瓶颈，有目的的优化。另一方面，也需要考虑如何评估优化的效果。如果没有一个客观的评估，优化方案是否有效心中就没有底。谈到Profiling，大多数人估计都会想到log大法，就是在程序的一些关键位置打上log。log通常包括时间、事件、状态等。在chromium中，开发人员早就预料了此类需求，设计了一套强大的NetLog。下面就分析一下chromium中NetLog的设计、实现及其用法。</p>

<!--more-->


<h2>概述</h2>

<p>NetLog是一套为Chrome网络栈而设计的事件日志机制，帮助调试问题和分析性能。它遵照&#8221;抓取->转储->分析&#8221;的工作流程，这点和某些工具，如tcpdump有些相像。</p>

<p>典型的使用场景为：</p>

<ol>
<li> 用户启用网络日志</li>
<li> 用户重现问题</li>
<li> 用户将日志上传到BUG报告系统</li>
<li> 开发人员分析日志，定位问题</li>
</ol>


<p>在chrome网络栈内部，在一些关键位置都加入了日志机制，产生事件。观察者监控事件流，对数据进行处理。Chrome中已有的观察者有：</p>

<ul>
<li>(net_log_logger.cc) 将事件流序列化到文件</li>
<li>(net_internals_ui.cc) 将事件传递到Javascript应用程序chrome://net-internals,改应用程序可以将数据可视化展现，也可以导出到文件</li>
</ul>


<h2>NetLog的设计理念：</h2>

<ul>
<li>NetLog缺省关闭</li>
<li>NetLog关闭时不会影响性能</li>
<li>Chrome官方发行版本支持NetLog</li>
<li>事件容易序列化/反序列化到磁盘</li>
<li>NetLog仅仅用作记录日志</li>
</ul>


<p>也就是说，日志如何序列化，如何分析并非NetLog需要关心的事情。此外，不要通过NetLog获取内部网络信息，比如为NetLog增加一个观察者得到内部网络状态信息。正确的做法是为NetworkDelegate增加接口，进行充分的测试，然后增加文档进行说明。</p>

<h2>NetLog事件的结构定义</h2>

<p>C++中NetLog事件用net::NetLog::Entry定义，这是在内存中的表示，非常容易序列化到JSON。</p>

<p>不到必要的时候，NetLog事件并不会序列化到JSON。在需要序列化事件时，JSON格式如下：</p>

<table>
<thead>
<tr>
<th align="center"> 字段 </th>
<th align="center"> 类型 </th>
<th align="left"> 描述 </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> time </td>
<td align="center"> string </td>
<td align="left">事件发生的时间（毫秒)，这是时间滴答数而不是unix时间戳. 尽管这是一个数字域，使用字符串表示是避免精度损失</td>
</tr>
<tr>
<td align="center"> type </td>
<td align="center"> number </td>
<td align="left">事件类型的ID，枚举值定义在<a href="http://src.chromium.org/viewvc/chrome/trunk/src/net/base/net_log_event_type_list.h?view=markup">net_log_event_type_list.h</a></td>
</tr>
<tr>
<td align="center"> source </td>
<td align="center"> object </td>
<td align="left">产生事件的实例，比如可以标识出某个特定的URLRequest</td>
</tr>
<tr>
<td align="center"> phase </td>
<td align="center"> number </td>
<td align="left">BEGIN, END, NONE三个枚举值之一</td>
</tr>
<tr>
<td align="center"> params </td>
<td align="center"> object </td>
<td align="left">可选字段 </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromium网络加载速度研究(1)]]></title>
    <link href="http://mogoweb.github.io/blog/2014/03/18/chromium-loading-speed-research-0/"/>
    <updated>2014-03-18T16:22:09+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/03/18/chromium-loading-speed-research-0</id>
    <content type="html"><![CDATA[<p>本文主要内容翻译自Google的文档<a href="https://developers.google.com/chrome/mobile/docs/data-compression?hl=zh-CN">Data Compression Proxy</a>，如果您觉得文章写的不明白，请参看原文。</p>

<p>对于一款浏览器而言，速度无疑是非常重要的，其中加载速度更是重中之重。UC浏览器很早就采用了云端加速技术，所以在网页加载速度方面一直很有优势。现在越来越多的浏览器，如Opera、QQ浏览器都采用了服务器端加速技术。Chrome移动版从V33开始正式支持数据压缩代理。下面就分析一下Chrome for Android所采用的数据压缩技术。</p>

<!--more-->


<h2>数据压缩代理</h2>

<p>最新的Chrome for Android支持数据压缩代理，通过Google部署的代理服务器优化网站内容，可以极大的减少数据流量。有数据表明，采用这一特性可以减少web页面大小的50%。要启用这一功能，进入Chrome浏览器的菜单&#8221;设置->带宽管理->减少数据流量消耗&#8221;，然后打开即可。</p>

<h2>实现原理</h2>

<p>最核心的优化，减少数据大小，是由Google服务器实现的。当开启了&#8221;数据压缩代理&#8221;特性时，Chrome在手机和运行于Google数据中心的服务器之间建立连接，所有非加密的HTTP请求都通过该连接中转。</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_compression-proxy.png" alt="Data Compression Proxy" /></p>

<p>代理服务器收到手机发起的请求后，向目标网站发起请求，对每个回应进行优化，再回给手机。内容优化是通过Google的开源库<a href="https://developers.google.com/speed/pagespeed/">PageSpeed</a>实现的，该库针对Chrome移动浏览器进行了特别的微调。网页的渲染、JavaScript执行，是由手机上的Chrome浏览器完成的。</p>

<ul>
<li>HTTPS连接不通过数据压缩代理</li>
<li>使用数据压缩代理不需要Google账号</li>
<li>匿名窗口中的浏览不经过数据压缩代理</li>
</ul>


<p>如果您对压缩代理节省的带宽表示怀疑，可以进入到浏览器设置中查看浏览器接收数据的原始大小和优化大小的对比图。如下图所示，带宽节省增长很快。</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_bandwidth-usage.png" alt="bandwidth usage" /></p>

<p>让我们近距离观察一下压缩代理进行了那些特别的优化。</p>

<h3>SPDY</h3>

<p>从手机到代理服务器会尽力采用SPDY, 这是一个针对Web优化的协议，得到了Chrome/Firefox和Opera的支持，也是即将到来的HTTP/2.0标准的基础。如果SPDY连接无法创建，则会建立一个普通的HTTP/1.1代理连接。</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_http-https.png" alt="http-https" /></p>

<p>使用SPDY协议，代理服务器可以在一个TCP连接上同时复用多个请求和回应，这样做有很大的好处：它可以分摊多个请求的TCP握手开销。去掉每个请求的TCP慢速启动阶段，提高吞吐量，还能在数据流上智能的定义请求和回应优先级。事实上，研究表明仅仅使用SPDY可以减少移动网络下23%的页面加载时间，这还没有将内容优化算在内。</p>

<p>此外，使用数据压缩代理还有许多其它的好处：</p>

<ul>
<li>DNS延迟绑定：DNS查找由代理服务器执行，而不是由手机，这样查找过程可以快很多。</li>
<li>更少的网络活动和更快的加载速度意味着移动射频活动期更短（减少电量消耗）</li>
</ul>


<h3>内容优化</h3>

<p>悲剧的是，大多数网站并没有对移动终端进行优化，导致内容加载低效和渲染慢。PageSpeed的经验表明，许多内容的优化可以自动完成，就如同数据压缩代理所做的。</p>

<p><em>图片转码:</em> 平均下来，每个页面60%的传输数据是图片。为此，代理服务器特别对此进行优化，将所有的图片都转码为<a href="https://developers.google.com/speed/webp/">WebP</a>格式。WebP比当前流行的格式，如JPEG和PNG，数据量更小。代理支持最新的WebP无损格式，并根据设备分辨率和像素密度对每个图像进行优化。综合各种方法，图像大小可以减少80%。</p>

<p><em>内容压缩:</em> 代理智能的压缩和缩减HTML、JavaScript和CSS资源，通过移除不必要的空格、注释以及其它与页面渲染无关的元数据，再加上对所有资源启用gzip压缩，可以极大的节约带宽。</p>

<p><em>安全浏览:</em> 代理实现了移动Chrome浏览器上的<a href="http://blog.chromium.org/2012/01/all-about-safe-browsing.html">安全浏览</a>，当您访问恶意或者钓鱼网站时会告之浏览器，浏览器会显示一个警告页面。恶意网站列表由代理持续更新。</p>

<h2>该采用云加速技术吗？</h2>

<p>通过前面的分析，采用数据压缩代理似乎是个不错的方案，但是从图1可以看出，所有的数据都需要通过数据压缩代理中转，这就要求：</p>

<ul>
<li>拥有强大的服务器，快速的进行数据压缩</li>
<li>拥有强大的数据中心，否则瓶颈会存在于数据压缩代理</li>
<li>拥有强大的分布式计算能力，浏览器终端需要能够就近连接数据压缩代理</li>
</ul>


<p>在中国，Chrome for Android如果开启数据压缩代理功能，速度反而更慢，其原因就在于Google在中国并没有部署服务器。对于个人开发者和中小企业，一来无法部署强大的数据中心，二来也无法使用Google的服务，所以服务器端加速方案不具备可行性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 4.4 WebView实现分析]]></title>
    <link href="http://mogoweb.github.io/blog/2014/01/16/analysis-of-android-4-4-webview-implementation/"/>
    <updated>2014-01-16T19:22:09+08:00</updated>
    <id>http://mogoweb.github.io/blog/2014/01/16/analysis-of-android-4-4-webview-implementation</id>
    <content type="html"><![CDATA[<p>随着Android4.4的发布，Android WebView改成由Chromium驱动了。浏览Android4.4源代码，可以看到之前版本中的external/WebKit目录被移除掉了，取而代之的是chromium_org。也就是说chromium已经完全取代了之前的WebKit for Android。虽然chromium完全取代了以前的WebKit for Android，但Android WebView的API接口并没有变，与老的版本完全兼容。这样带来的好处是基于WebView构建的APP，无需做任何修改，就能享受chromium内核的高效与强大。下面就Android 4.4中WebView的实现进行分析。</p>

<p>先来看看frameworks/base/core/java/android/webkit下的文件，里面有我们熟悉的WebView、WebSettings、WebViewClient等类，其中最主要的就是WebView了，相关的类关系如下：</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_android_4_4_webview_classes_diagram.png" alt="" /></p>

<p>从图中可以看出，设计者抽象出了一个WebViewProvider接口，WebView本身并不做事，所有的处理就是交给WebViewProvider。而WebViewProvider只是一个接口，由实现者决定采用哪种引擎。从Android4.1开始，就采用了这种设计架构，开始为chromium核心的WebView做准备。在Android 4.4之前的版本，由WebViewClassic实现WebViewProvider接口。在Android4.4中，则是WebViewChromium实现WebViewProvider接口。WebViewFactory也采用了相似的结构，决定了如何实例化WebViewFactoryProvider，WebViewFactoryProvider有一个关键的接口createWebView，创建具体的WebViewProvider。（注：AOSP master源码基于WebKit的实现仍然保留，但在Android4.4中已经移除，由于采用了灵活的架构，所以在两种核心之间非常容易切换）</p>

<!--more-->


<p>目前的代码结构如下图所示，在ContentAPI之上，Chromium的WebView实现封装了一个新的类AwContents，该类主要基于ContentViewCore类的实现，不同的是，AwContents需要基于一个原来存在于“chrome/”目录下的模块（图中的BrowserComponents），但是AwContents不应该依赖该目录，所以，将chrome中的一些所谓的浏览器模块化是Chromium的一个方向。目前，一些模块以及从chrome中抽取出来了，参见“components/”。</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_android_4_4_webview_awcontents.png" alt="" /></p>

<p>AwContents提供的不是WebView的API，所以，需要一层桥接部分，将AwContents桥接到WebView，这就是图中的桥接模块，该模块位于Android源代码中的frameworks/webview/chromium/java/com/android/webview/chromium/目录下，WebViewChromium和WebViewChromiumFactory类作为WebView的具体实现，依赖于Chromium项目的AwContents模块，整体模块图如下：</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_androd_4_4_webview_components.png" alt="" /></p>

<p>AwContents基于Content之上，专门针对Android WebView需求而进行的一个封装，这个封装只针对Android平台。</p>

<p>WebView同样也是基于ContentAPI(web contents, ContentViewCore等)，在这点上来说，它同Content Shell和Chromium浏览器没有大的不同，区别在于它们对很多Delegate类的实现不同，这是ContentAPI用于让使用者参与内部逻辑和实现的过程。具体来说，它主要有以下两个方面的不同：</p>

<ol>
<li>渲染机制</li>
</ol>


<p>因为WebView提供的是一个View控件，那么View控件的容器可能接受储存在CPU中的结构（如bitmap），也可能是储存在GPU内存中的结构（如surface），所以它需要提供两种不同的输出结果。</p>

<p>Chromium引入了一种新的合成器UberCompositor++，该合成器支持输出到GPU和CPU内存两种方式。对于Compositor的结果输出到给定View的GPU内存这种方式，关键点在于实现AwContents.InternalAccessDelegate接口的requestDrawGL方法。与requestDrawGL实现有关的代码不多，只涉及到DrawGLFunctor.java和GraphicsUtils.java，以及与之关联的native实现draw_gl_functor.cpp, graphic_buffer_impl.cpp和graphics_utils.cpp，naitve代码位于frameworks/webview/chromium/plat_support目录下。这部分代码不多，但牵涉到了Android源码，并不是只使用了Android SDK和NDK的API。</p>

<ol>
<li>进程</li>
</ol>


<p>目前WebView只支持单进程方式，未来不排除支持多进程方式。单进程意味了没有办法使用Android的isolated UID机制，因此，某种程度上来讲，安全性降低了，而且页面的渲染崩溃会导致使用WebView的应用程序崩溃。</p>

<h4>Android 4.4中的chromium</h4>

<p>Android 4.4代码树中的chromium源码位于external/chromium_org，而不是external/chromium, external/chromium是一个老版本的chromium，主要提供chromium net网络栈。external/chromium_org下的chromium版本为r227252，对应的Chromium发行版本为30.0.1599.101， Blink版本为r159105。</p>

<p>AOSP源码中的默认浏览器基于chromium核心，但Browser代码和之前的版本并没有差别，这也看出WebView API的兼容性相当好。而google官方则宣布以后android系统中不再提供浏览器，只有Chrome for Android。</p>

<h4>Android4.4中的chromium移植分析</h4>

<p>从Android4.4的chromium_org git库log可以看到，从chromium源码获取分支后，只cherry-pick了两个提交，而且cherry-pick的代码也是来自chromium项目，信息如下：</p>

<p>commit 3311b27cb6fdbe7af035a7d769944a17328c6227</p>

<p>Author: Ben Murdoch <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#98;&#101;&#x6e;&#x6d;&#64;&#103;&#111;&#111;&#x67;&#x6c;&#x65;&#46;&#x63;&#111;&#109;">&#98;&#101;&#110;&#109;&#64;&#x67;&#111;&#111;&#103;&#108;&#x65;&#46;&#99;&#x6f;&#109;</a></p>

<p>Date:&#160;&#160; Mon Oct 21 12:33:52 2013 +0100</p>

<p>&#160;&#160;&#160; Cherry pick&#160; [Android] MediaPlayerBridge should pass Bridge to getAllowedOperations</p>

<p>&#160;&#160;&#160; Cherry pick of <a href="https://codereview.chromium.org/32213003/">https://codereview.chromium.org/32213003/</a></p>

<p>&#160;&#160;&#160; Bug: 11311417</p>

<p>&#160;&#160;&#160; Original description:</p>

<p>&#160;&#160;&#160; [Android] MediaPlayerBridge should pass Bridge to getAllowedOperations</p>

<p>&#160;&#160;&#160; Right now the Java side is expecting a MediaPlayer object to be passed</p>

<p>&#160;&#160;&#160; to the MediaPlayerBridge.getAllowedOperations function, but native</p>

<p>&#160;&#160;&#160; is actually passing it a MediaPlayerBridge. Update the code to be</p>

<p>&#160;&#160;&#160; consistent &#8211; Java now expects the MediaPlayerBrdige and uses it to</p>

<p>&#160;&#160;&#160; extract a MediaPlayer.</p>

<p>&#160;&#160;&#160; Change-Id: I5ac618c833c6c3ff015d43405a9a4d507fce9ba5</p>

<p>commit 41a8683eef4139670e32f284a160dc3702d9a5c2</p>

<p>Author: Ben Murdoch <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x62;&#101;&#x6e;&#109;&#x40;&#x67;&#111;&#x6f;&#103;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x62;&#x65;&#x6e;&#x6d;&#64;&#x67;&#x6f;&#111;&#x67;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></p>

<p>Date:&#160;&#160; Mon Oct 21 11:04:45 2013 +0100</p>

<p>&#160;&#160;&#160; Cherry pick android: fix base::Time::FromLocalExploded() crash.</p>

<p>&#160;&#160;&#160; Cherry pick of <a href="https://codereview.chromium.org/27472003/">https://codereview.chromium.org/27472003/</a></p>

<p>&#160;&#160;&#160; Bug: 11313033</p>

<p>&#160;&#160;&#160; Original description:</p>

<p>&#160;&#160;&#160; android: fix base::Time::FromLocalExploded() crash.</p>

<p>&#8230;skipping&#8230;</p>

<p>&#160;&#160;&#160; Record Chromium merge at DEPS revision 30.0.1599.101</p>

<p>&#160;&#160;&#160; This commit was generated by merge_to_master.py.</p>

<p>&#160;&#160;&#160; Change-Id: Ie9e9e034f3e5d9a3fe3edf87595c7be467d3136b</p>

<p>结合前面的分析，可以得出如下结论：</p>

<p>1）AwContents都是基于Android SDK/NDK开发，并没有使用Android Source里面的未公开API和库。</p>

<p>2）Android 4.4中使用的chromium，直接取自chromium开源项目，虽然它使用了自己的git库：<a href="https://android.googlesource.com/platform/external/chromium_org">https://android.googlesource.com/platform/external/chromium_org</a></p>

<p>3）Android4.4中的chromium并没有针对android平台做一些特殊修改，和chromium开源项目的代码一致</p>

<p>4）与Android source密切相关的代码位于ChromiumWebView。</p>

<p>如前面所述，在实现reqeustDrawGL时，使用到了Frameworks 未公开的API，native部分代码也用到了Android source中的代码。所涉及的类和Android Source如下：</p>

<pre><code>1. HardwareCanvas
2. ViewRootImpl
3. DrawGlInfo.h
4. GraphicBuffer.h
5. GraphicsJNI.h
</code></pre>

<p>5）整个chromium移植代码中，与android source密切相关的代码极少，绝大部分都是基于SDK和NDK而开发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译]Android WebView]]></title>
    <link href="http://mogoweb.github.io/blog/2013/10/24/translated-android-webview/"/>
    <updated>2013-10-24T15:27:02+08:00</updated>
    <id>http://mogoweb.github.io/blog/2013/10/24/translated-android-webview</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="https://crosswalk-project.org/#wiki/android-webview">https://crosswalk-project.org/#wiki/android-webview</a></p>

<ul>
<li><p>架构&amp;组件</p>

<ul>
<li>AOSP中的Android WebView将基于AwContents，其位于Content API和Content View之上。</li>
<li>与Content API不同，它还依赖于从最初的chrome browser分离出来的组件，组件位于components/下，包含auto_login_parser，navigation_interception，visitedlink_browser，visitedlink_renderer和web_contents_delegate_android，这些都是用于页面。</li>
<li>无渲染进程（进程内渲染），无沙盒机制（sandbox机制）</li>
<li>图形架构和Content Shell有很大的不同，且正在开发中，将支持软件和硬件输出。</li>
</ul>
</li>
<li><p>API</p>

<ul>
<li>API类似于EFL WebView，不会暴露内部的browser/renderer/gpu进程。</li>
<li>能够加载URL，接收加载过程中的事件和回调。</li>
<li>可通过addJavaScriptInterface扩展JavaScript API，允许JavaScript调用Java代码，反之这不支持。</li>
<li>提供了若干API接收页面状态改变通知和页面回调。</li>
</ul>
</li>
<li><p>消息循环和事件处理</p>

<ul>
<li>整合利用Android消息处理</li>
<li>native代码设置定时器到Java侧的消息循环</li>
</ul>
</li>
<li><p>图形</p>

<ul>
<li>渲染使用chromium合成器，开启了硬件加速</li>
<li>合成器输出支持软件和硬件Surface</li>
<li>硬件加速的架构和content shell不同，和ChromeOS类似。现在还处在早期开发阶段，使用了UberCompositor，支持软件输出</li>
</ul>
</li>
<li><p>WebAPI扩展</p>

<ul>
<li>API addJavaScriptInterface可用于JavaScript API扩展，但支持JavaScript调用Java代码。</li>
<li>相反方向的调用（Java &ndash;> JavaScript）不支持</li>
<li>addJavaScriptInterface通过NPObject机制（之前用于NPAPI插件）支持进程外访问，虽然在WebView中不再需要。</li>
<li>来自Java侧的事件通知貌似还不支持</li>
</ul>
</li>
<li><p>API细节和涵盖范围</p>

<ul>
<li>WebViewClient用于页面状态改变通知</li>
<li>WebChromeClient包含参与渲染逻辑的回调</li>
<li>原生代码/JS交互</li>
<li>页面加载</li>
<li>导航&amp;历史记录</li>
<li>文字搜索</li>
<li>事件处理</li>
<li>轨迹球、触摸、键盘</li>
<li>不支持鼠标事件</li>
<li>设置：编码</li>
<li>页面信息：标题、favicon</li>
<li>HTTPS/SSL</li>
<li>页面加载状态、缩放、重定向、URL重载，等等</li>
</ul>
</li>
<li><p>源码</p>

<ul>
<li>src/android_webview

<ul>
<li>android_webview_java.jar, libwebviewchromium.so和webviewchromium.pak是本模块的编译目标.</li>
</ul>
</li>
<li>Google的工程师正在Android开源项目里开发基于Chrome核心的新WebView.

<ul>
<li>官方 站点:
<a href="https://android.googlesource.com/platform/frameworks/base.git/+/master/core/java/android/webkit/">https://android.googlesource.com/platform/frameworks/base.git/+/master/core/java/android/webkit/</a></li>
<li>镜像:
<a href="https://github.com/android/platform_frameworks_base/tree/master/core/java/android/webkit">https://github.com/android/platform_frameworks_base/tree/master/core/java/android/webkit</a></li>
<li>第三方开发者也在基于android_webview模块开发ChromeView

<ul>
<li>ChromeView有着和Android Webview一样的API. <a href="https://github.com/pwnall/chromeview-src">https://github.com/pwnall/chromeview-src</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
