<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | 放飞梦想]]></title>
  <link href="http://mogoweb.net/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://mogoweb.net/"/>
  <updated>2015-09-24T16:29:10+08:00</updated>
  <id>http://mogoweb.net/</id>
  <author>
    <name><![CDATA[mogoweb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的macos编程之旅-AutoLayout]]></title>
    <link href="http://mogoweb.net/blog/2014/11/10/my-macos-programming-life-3/"/>
    <updated>2014-11-10T09:00:17+08:00</updated>
    <id>http://mogoweb.net/blog/2014/11/10/my-macos-programming-life-3</id>
    <content type="html"><![CDATA[<p>开始了Mac OS编程之后，仿佛又回到了Visual Basic编程年代，拖拖拽拽几个控件，app的UI就设计好了。但我至今还记得当年面临一个头疼的问题，就是应用程序在不同分辨率下的展现问题。为什么会头疼呢？那时主流的屏幕分辨率是800x600，但有些更好的显示器分辨率为1024x768，如果我们按照1024x768的分辨率设计UI，那么在800x600的分辨率下就显示不全，如果按照800x600的分辨率设计UI，那在1024x768下就没法充分利用屏幕空间。所以当时的app通常会指定最佳分辨率，低了显示不全，高了就只利用屏幕的一部分空间。</p>

<p>回到<strong>365看图</strong>软件上来，按照IKImageViewDemo设计的UI，存在一个问题：当我拉大窗口，图片显示区域并不会随之变大，整个界面变得很不协调。原因呢在于UI采用了绝对布局，控件的大小和位置是固定的。当然我也可以通过编程的方式，根据窗口的大小，计算图片显示区域的大小，然后动态的设置大小和位置，但这比较繁琐。在Android中，通过设计出线性布局、相对布局等布局方式来解决这一问题，而绝对布局是不推荐使用的。Mac OS是如何解决这一难题的呢？答案就是AutoLayout。</p>

<h3>AutoLayout <sup>[1]</sup></h3>

<p>自动布局系统通过数学化描述元素之间的关系来布局应用程序用户界面。这种关系称作约束，可以定义在单个的元素上，也可以定义在元素之间。使用自动布局，您可以创建动态灵活的界面来适应窗口大小的改变、设备横竖屏变化，还可以应对本地化带来的麻烦。</p>

<p>约束是自动布局的基础，它描述了界面元素布局的规则，比如您可以创建一个约束指定元素的宽度，或者与另一个元素的水平距离。您也可以添加或者删除约束，甚至修改约束的属性，来改变界面布局。</p>

<p>当您添加了多个约束后，不可避免的可能会存在冲突。所以，在计算用户界面上元素的运行时位置时，自动布局系统会综合考虑所有的约束，然后找出一种最大满足所有约束的布局。</p>

<p>自动布局从XCode 5开始引入，适用于ios 6.0和mac os 10.7及以上系统。当一个新工程创建时，自动布局缺省是开启的。</p>

<h3>添加约束</h3>

<p>添加约束的最简单方法就是通过拖拽来完成，方法如下：按住Ctrl键，然后拖动画布上的控件，类似于创建outlet连接。您可以拖拽元素到自身、到容器，或者到另一个元素。</p>

<p><img src="http://mogoweb.qiniudn.com/mogoweb_2014_mac_autolayout_trailing_2x.png" alt="autolayout" /></p>

<p>如上图中，您可以根据需要选择&#8221;保持在容器垂直方向的中央“，也可以选择”尾部与容器保持一定的距离“。</p>

<p>在<strong>365看图</strong>中，我选择将IKImageView的四边与容器保持一定的距离，这样，当窗口放大和缩小时，IKImageView就能同步放大与缩小。</p>

<h3>更多</h3>

<p>关于约束，还有许多地方值得探讨：比如编辑/删除约束，多条约束出现冲突该如何处理，如何通过编程的方法增加约束，等等。现在我只使用了一个基础的用法，更多的资料，可以参考apple的一篇官方文档：<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html">Auto Layout Guide</a>。</p>

<p>[1]  <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html">https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的macos编程之旅-应用程序关联]]></title>
    <link href="http://mogoweb.net/blog/2014/11/05/my-macos-programming-life-2/"/>
    <updated>2014-11-05T08:55:21+08:00</updated>
    <id>http://mogoweb.net/blog/2014/11/05/my-macos-programming-life-2</id>
    <content type="html"><![CDATA[<p>对objective-c做了基础的入门之后，我就开始了<strong>365看图</strong>的开发。我个人偏好通过实战来掌握新知识，碰到问题后再来阅读相关的资料并解决问题。从苹果开发者网站找到了一个<a href="https://developer.apple.com/library/mac/samplecode/IKImageViewDemo/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004049">IKImageViewDemo</a>示例，这个例子足够简单，也满足我要开发的<strong>365看图</strong>的基本功能。以IKImageViewDemo作为模板，<strong>365看图</strong>就有了显示、放大、缩小、旋转图片等功能。接下来需要实现一个功能：关联应用程序到图片类型。简单的说，就是在Finder中鼠标右键点击图片文件，能够选择<strong>365看图</strong>打开图片，或者将图片文件拖拽到<strong>365看图</strong>即打开。</p>

<h3>注册文档类型</h3>

<p>在Windows系统中，有一个叫做注册表的东东来集中管理文档类型和能够打开文档的应用程序列表，在Mac系统中，则是通过应用程序包中的info.plist。在info.plist中，声明应用程序能够处理的文档类型(通过文件名后缀)。在<strong>365看图</strong>项目中有一个ImageViewer-Info.plist的文件，内容如下:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;
    &lt;string&gt;zh_CN&lt;/string&gt;
    &lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;
            &lt;array&gt;
                &lt;string&gt;jpg&lt;/string&gt;
                &lt;string&gt;png&lt;/string&gt;
            &lt;/array&gt;
            &lt;key&gt;CFBundleTypeIconFile&lt;/key&gt;
            &lt;string&gt;&lt;/string&gt;
            &lt;key&gt;CFBundleTypeRole&lt;/key&gt;
            &lt;string&gt;Viewer&lt;/string&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
    &lt;string&gt;${EXECUTABLE_NAME}&lt;/string&gt;
    &lt;key&gt;CFBundleIconFile&lt;/key&gt;
    &lt;string&gt;&lt;/string&gt;
    &lt;key&gt;CFBundleIdentifier&lt;/key&gt;
    &lt;string&gt;com.mogoweb.${PRODUCT_NAME:rfc1034identifier}&lt;/string&gt;
    &lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;
    &lt;string&gt;6.0&lt;/string&gt;
    &lt;key&gt;CFBundleName&lt;/key&gt;
    &lt;string&gt;${PRODUCT_NAME}&lt;/string&gt;
    &lt;key&gt;CFBundlePackageType&lt;/key&gt;
    &lt;string&gt;APPL&lt;/string&gt;
    &lt;key&gt;CFBundleShortVersionString&lt;/key&gt;
    &lt;string&gt;1.0&lt;/string&gt;
    &lt;key&gt;CFBundleSignature&lt;/key&gt;
    &lt;string&gt;????&lt;/string&gt;
    &lt;key&gt;CFBundleVersion&lt;/key&gt;
    &lt;string&gt;1&lt;/string&gt;
    &lt;key&gt;LSApplicationCategoryType&lt;/key&gt;
    &lt;string&gt;public.app-category.photography&lt;/string&gt;
    &lt;key&gt;LSMinimumSystemVersion&lt;/key&gt;
    &lt;string&gt;${MACOSX_DEPLOYMENT_TARGET}&lt;/string&gt;
    &lt;key&gt;NSHumanReadableCopyright&lt;/key&gt;
    &lt;string&gt;Copyright © 2014年 mogoweb. All rights reserved.&lt;/string&gt;
    &lt;key&gt;NSMainNibFile&lt;/key&gt;
    &lt;string&gt;MainMenu&lt;/string&gt;
    &lt;key&gt;NSPrincipalClass&lt;/key&gt;
    &lt;string&gt;NSApplication&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>其中关键的地方在于:</p>

<pre><code class="xml">&lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;
            &lt;array&gt;
                &lt;string&gt;jpg&lt;/string&gt;
                &lt;string&gt;png&lt;/string&gt;
            &lt;/array&gt;
            &lt;key&gt;CFBundleTypeIconFile&lt;/key&gt;
            &lt;string&gt;&lt;/string&gt;
            &lt;key&gt;CFBundleTypeRole&lt;/key&gt;
            &lt;string&gt;Viewer&lt;/string&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
</code></pre>

<p>指明了应用程序能够处理jpg, png为后缀的文件。</p>

<h3>获取文件名</h3>

<p>通过右键点击开启应用程序，app是如何得到这个文件名呢？请看下面的代码:
<code>objc
- (BOOL) application : (NSApplication*) sender openFile : (NSString*) pathname
{
    NSLog(@"application is asking to open %@", pathname);
    return YES;
}
</code></p>

<h3>调试技巧</h3>

<p>通过拖拽打开应用程序如何调试(比如在application:openFile中打断点)呢？方法如下：</p>

<ol>
<li>在Xcode中点击菜单 <strong>Product > Scheme > Edit Scheme</strong> ，在 <strong>Info</strong> 页修改 <strong>Lauch</strong> 选项为：<strong>Wait for executable to be launched</strong></li>
<li>在 application:openFile 方法中设置断点。</li>
<li>打开 <strong>Finder</strong>, 将图片文件拖拽到您的应用程序上。［注：您可以在XCode的<strong>Project Navigator</strong>中右键点击Porducts节点下的xxx.app，然后点击<strong>Show in Finder</strong>菜单项来定位你的app可执行文件的位置］</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的macos编程之旅-Objective C入门]]></title>
    <link href="http://mogoweb.net/blog/2014/10/24/my-macos-programming-life-1/"/>
    <updated>2014-10-24T08:48:13+08:00</updated>
    <id>http://mogoweb.net/blog/2014/10/24/my-macos-programming-life-1</id>
    <content type="html"><![CDATA[<p>&lt;<Objective-C Programming>>这本书属于基础入门书，Part I和Part II的内容是C语言基础，直接略过，直接跳到“Part III Objective-C and Foundation”。由于已经有C/C++编程经验，看书时着重于Objective C和C++的不同之处。</p>

<p>Objective-C是在C语言的基础上添加面向对象特性发展而来，下面就看看Objective-C中的面向对象三大要素。</p>

<h2>1. 封装</h2>

<p>和C++、Java等面向对象语言不同，Objective-C中并没有定义private, protected, public关键字，所有数据成员（instance variable）
都是私有的，无法直接访问。例如如下类定义中，x是不能直接被外部访问的。</p>

<pre><code class="objc">@interface Foo : NSObject
{
    double x;
}

@property int y;

-(int) f:(int)x;
-(int) g:(int)x:(int)y;

@end

@implementation Foo
@synthesize y;
-(int) f:(int)x
{
}

-(int) g:(int)x:(int)y
{
}

@end
</code></pre>

<p>要访问类的数据成员，必须通过类的成员方法，最常见的就是称之为getter和setter的方法。为了简化存取方法，Objective-C引入了property概念。比如上面的代码中:</p>

<pre><code class="objc">@property int y;
</code></pre>

<p>定义了属性y，并在实现文件中使用如下代码:
<code>objc
@synthesize y;
</code></p>

<p>上面的语句相当于为y定义了getter和setter方法，比如你可以通过y()返回属性值，setY()设置属性值。</p>

<p>同样的，成员方法也没有共有私有之分，所有成员方法都可以被外部访问。上述代码中成员方法前的“-”表示这是一个实例方法，如果为“+”表示类方法，等价于C++中的静态成员函数。如果要为类定义一个方法，又不希望被外部调用，该如何做到呢？解决的方法是不在头文件(.h)中定义，直接在实现文件(.m)中加入成员函数。是的，没错，Objective-C并不要求在头文件中列出所有的成员方法。</p>

<h2>2. 继承</h2>

<p>和C++不同的是，Objective-C是单根继承体系，所有的类都直接或间接继承自NSObject（注：Objective-C语言规范并没有规定这个根类的名字），这一点和Java类似。同样的，Objective-C不支持多继承。和Java语言中的接口类似的东西在Objective-C中被称作协议(protocol)。协议是一个方法声明的列表，有些方法是必须实现的，有些方法可以定义为可选的。和类一样，协议可以继承其它的协议。一个Objective-C类可以实现多个协议。值得一提的是，协议的名字可以和类名一样，比如NSObject是一个类，同时还存在一个名为NSObject的协议。因为采用了不同的关键字，所以编译器能够区分。比如下面的代码中，Foo继承NSObject类，同时实现了NSObject协议：</p>

<pre><code class="objc">@interface Foo : NSObject &lt;NSObject&gt;
</code></pre>

<p>在C++和Java中，父类可以控制成员方式是否被子类覆盖（通过virtual/final关键字)，在Objective-C中，只要子类的成员方法和父类完全一样（包括参数个数及类型），就会覆盖父类的成员方法。</p>

<h2>3. 多态</h2>

<p>Objective-C支持多态，而且不像C++那么复杂，比如C++中，如果使用栈变量实例，是无法达到多态效果的。关于Objective-C的多态，可通过下面的代码实例说明：</p>

<pre><code class="objc">@interface Person : NSObject {
    NSString *name;
}
-(void)setName:(NSString*)name;
@end

@implementation Person
-(void)setName:(NSString*)nameValue {
    name = nameValue;
    NSLog(@"Person's name:%@", name);
}
@end

@interface Student : Person
@end

@implementation Student
-(void)setName:(NSString*)nameValue {
    name = nameValue;
    NSLog(@"Student's name:%@", name);
}
@end

int main(int argc, const char* argv[]) {
    @autoreleasepool {
        Person* person = [[Student alloc]init];
        [person setName:@"Student A"];
    }

    return 0;
}
</code></pre>

<h2>4. 小结</h2>

<p>Objective-C支持面向对象的编程，同时又没有C++的多继承、虚继承等复杂的概念，如果之前有过C++/Java等编程经验，会很容易就能理解Objective-C中的面向对象编程，学起来也会非常轻松。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的macos编程之旅]]></title>
    <link href="http://mogoweb.net/blog/2014/10/23/my-macos-programming-life/"/>
    <updated>2014-10-23T08:43:39+08:00</updated>
    <id>http://mogoweb.net/blog/2014/10/23/my-macos-programming-life</id>
    <content type="html"><![CDATA[<p>自从购入iMac后，这台水果机一直就是我的专属机。女人天生就对电脑这种科技产品心存畏惧，老婆一看这台电脑不是熟悉的Windows系统，就摸都不想摸。直到有一天，老婆拿了一个拷贝有儿子照片的U盘，要用这台iMac浏览一下照片，因为这台iMac的屏幕够大，显示效果也好。于是我就让位让她操作一下。我指点了一下如何插入U盘，如何打开U盘里的内容，剩下的就交给老婆大人操作了。带着Windows下的操作方式，老婆双击打开了一张图片。嗯，不错，打开了第一张照片，效果相当清晰细腻，色彩鲜艳，不禁赞叹了一句：苹果电脑还是不错的。然后&hellip;下一张，怎么浏览下一张图片？按右箭头没有用，界面上也没有浏览下一张的按钮。（注：默认是系统自带的“预览”程序）</p>

<p>我解释，苹果电脑要这么用：首先将要照片导入iPhoto，然后通过iPhoto浏览。老婆睁大眼睛，为什么要导入，我仅仅想浏览一下照片而已。我意识到，和她解释苹果软件的设计理念、照片管理的理论是徒劳的，于是我又告诉她一个新方法：选择所有照片，然后从右键菜单选择“打开”。老婆还是瞪着我：为什么要先选择所有照片？看到照片，第一反应就是双击打开它。我哑口无言&hellip;至此，老婆对苹果电脑的一点好感荡然无存。</p>

<p>我有点不服气，mac下的软件那么多，总有一款适合Mac新手，于是到mac appstore上去找图形图像类软件。本来苹果电脑就是以优秀的图形处理能力见长，所以各种图像处理软件琳琅满目，但很遗憾没找到一款功能足够简单，满足我的需求的软件。我在windows下常用的“光影看图”也没出Mac版。作为一个多年的程序员，当然不满足于这样一种结果。既然找不到这样的软件，就自己动手，风衣足食，好歹自己也是写程序维生的。某位国外大神级人物曾经有一个惊人的论调：每半年就要学习一门新的语言。对此我很惭愧，已经有多年围着C++/Java打转，没有去尝试学一门新的语言了。正好以此为契机，开始掌握一门新的技能吧。</p>

<p>Mac OS下开发，Objective-C是当仁不让的No.1，当然今年的兵器普上出现了新面孔Swift。考虑到我在C/C++圈子摸爬滚打了这么多年，估计用Objective C会更称手一些吧。而且Objective C发展了二十多年，一直由苹果独立支撑，竟然在编程语言兵器普上排在前几位，自然有其过人之处。好吧，就选它了。学习一门新的语言，一本经典的入门书籍那是必须的，经过大牛的推荐，我选择了&lt;<Objective-C Programming - The Big Nerd Ranch Guide>>。</p>

<p>下面就开始我的mac os编程之旅吧！</p>
]]></content>
  </entry>
  
</feed>
