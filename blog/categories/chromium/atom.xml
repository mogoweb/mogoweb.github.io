<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chromium | 放飞梦想]]></title>
  <link href="http://mogoweb.net/blog/categories/chromium/atom.xml" rel="self"/>
  <link href="http://mogoweb.net/"/>
  <updated>2016-10-19T11:37:33+08:00</updated>
  <id>http://mogoweb.net/</id>
  <author>
    <name><![CDATA[mogoweb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在中国使用chromium镜像]]></title>
    <link href="http://mogoweb.net/blog/2016/07/27/using-chromium-mirror-in-china/"/>
    <updated>2016-07-27T08:44:27+08:00</updated>
    <id>http://mogoweb.net/blog/2016/07/27/using-chromium-mirror-in-china</id>
    <content type="html"><![CDATA[<p>在中国，由于伟大的GFW的存在，使得我们开发人员备受折磨。如果仅仅是使用google搜索，使用普通的梯子，差不多可以应付。但是对于Android和chromium开发人员而言，动辄几十G的代码，没有一个很稳定的梯子实在不行。现代的SCM系统通常采用git，好处不必说了，但有一个重大的问题，不支持断点续传。也就是说，如果有10几个G的源码，下载到90%，突然断了，就前功尽弃了。偏偏GFW又格外努力，好好的梯子，说不定哪天就突然被封，通常越是出名，封锁的越厉害。</p>

<p>因为这几年一直在做浏览器开发相关的工作，对此有深刻体会。我们在公司内部为chromium的git库做了镜像，开发人员可以减少一些痛苦。然而chromium更新的相当频繁，我们做镜像也跟得相当痛苦。</p>

<p>不过现在好了，CodeAurora下的Chromium browser for snapdragon也做了chromium的镜像，而且非常贴心的在中国部署了镜像服务器。这个项目由高通资助，致力于浏览器在高通snapdragon芯片上的优化。如果你是在开发ARM上的浏览器产品，非常具有借鉴意义。</p>

<p>下面说明一下如何通过CodeAurora的镜像服务器下载chromium源码。在此需要说明的是，通过镜像服务器，下载源码是不需要翻墙的，但是在后面，有一些工具链什么的，还是需要从google的服务器上下载，仍然需要翻墙。不过此时的下载量较小，普通的VPN，比如GreenVPN可以应付的过来。</p>

<p>因为chromium browser for snapdragon项目fork自chromium，所以下载、build、安装等方法，和chromium项目基本相同，在此不多说，如果需要，请访问相关文档：</p>

<p><a href="https://wiki.codeaurora.org/xwiki/bin/Chromium+for+Snapdragon/Setup/">Environment Setup</a></p>

<p><a href="https://chromium.googlesource.com/chromium/src/+/master/docs/android_build_instructions.md">Android Build Instructions</a></p>

<h2>配置CAF镜像</h2>

<pre><code>git config --global url.https://source.codeaurora.org.insteadOf git://codeaurora.org
git config --global url.https://beijing.source.codeaurora.org.insteadOf git://codeaurora.org
git config --global url.https://beijing.source.codeaurora.org.insteadOf https://source.codeaurora.org
</code></pre>

<p>注：还有几个可选镜像，可根据实际情况选择上海或香港的镜像服务器，将上面的beijing替换为shanghai或hongkong即可。</p>

<h2>选择活动的分支</h2>

<p>截止写这篇文章为止，有三个主要的分支：</p>

<ul>
<li>m52 beta分支</li>
<li>m46 正式分支</li>
<li>m42 维护分支，不建议在新项目中采用</li>
</ul>


<p>考虑到chromium v52已经出来一段时间，趋于稳定，而且经过一段beta期后，很快就会成为正式版本，所以推荐使用m52分支。</p>

<h2>m52下载与编译指南</h2>

<ul>
<li>编辑.gclient文件，内容如下：</li>
</ul>


<pre><code>solutions = [
  { "name"        : "src",
    "url"         : "git://codeaurora.org/quic/chrome4sdp/chromium/src.git@refs/remotes/origin/m52",
    "deps_file"   : "DEPS",
    "managed"     : False,
    "safesync_url": "",
  },
]
target_os = ["android"]
</code></pre>

<ul>
<li>同步代码</li>
</ul>


<pre><code>export GYP_CHROMIUM_NO_ACTION=1 # don't process gyp
gclient sync
cd src
./build/install-build-deps-android.sh
. ./build/android/envsetup.sh
gn gen out/Default --args='target_os="android" is_debug=false'
</code></pre>

<ul>
<li>生成SWE浏览器</li>
</ul>


<pre><code>ninja -C out/Default swe_browser_apk
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于chromium for android开发Android浏览器]]></title>
    <link href="http://mogoweb.net/blog/2015/11/03/develop-android-browser-base-on-chromium-for-android/"/>
    <updated>2015-11-03T08:39:21+08:00</updated>
    <id>http://mogoweb.net/blog/2015/11/03/develop-android-browser-base-on-chromium-for-android</id>
    <content type="html"><![CDATA[<p>在上一篇文章&lt;&lt; <a href="http://mogoweb.net/blog/2015/09/25/chromium-for-android-already-open-source/">Chromium for Android开源了</a> >>中谈到了Google已经完全开源了Chromium for Android，这样我们就完全可以开发与Chrome for Android媲美的Android浏览器了。通常浏览器的一些新特性和新功能会先出现在Chromium for Android上，稳定后才会出现在Chrome for Android上，如果我们基于Chromium for Android开发浏览器产品，在新特性和新功能方面不会落后于Chrome浏览器.</p>

<p>Chromium开源项目的代码及其庞大，也相当的复杂。对于Android开发人员，特别是UI开发人员来说，没有一个合适的IDE环境，会是一个非常痛苦的事情。我们通常是这样开发的，在sublime text中阅读、修改代码，使用chromium的构建系统build出apk，安装到手机，进行调试。对于native代码来说，这样的开发方式也不会有太多麻烦，因为native部分的代码通常修改很少。但如果主要进行UI的定制，这种开发方式就非常痛苦了。</p>

<p>为了应对这个问题，考虑如下方案：</p>

<ol>
<li>采用Android Studio作为开发环境，从Chromium for Android抽取chrome模块的源码，加入Android project。</li>
<li>native代码在chromium环境中build，作为so加入Android project</li>
<li>基础模块(base, content, net等)在chromium环境build为jar包，加入Android project</li>
<li>content, chrome, ui等模块的资源文件加入Android library project</li>
</ol>


<p>资源文件为什么不能直接都添加到Android project呢？因为命名空间的原因，比如content模块的资源的命名空间为org.chromium.content, chrome模块的资源的命名空间为org.chromium.chrome，所以需要建立不同的Android library project, 指定不同的包名。最后整个项目的结构如下：</p>

<pre><code>browser
  |_ app
  |    |_ libs
  |    |_ src
  |         |_ main
  |              |_ aidl
  |              |_ assets
  |              |_ java
  |              |_ jniLibs
  |              |_ res
  |_ libraries
       |_ androidmedia_res
       |_ chrome_res
       |_ content_res
       |_ datausagechart_res
       |_ ui_res
</code></pre>

<p>注意事项：</p>

<ol>
<li>chromium项目的源码和资源有些是自动生成的，需要到out目录下去复制</li>
<li>pak和dat等文件需要加入到assets目录，而且不能压缩</li>
<li>aidl文件加入到main/aidl下，android studio会自动处理</li>
</ol>


<p>实践证明，这种方案是行之有效的，请参考github上的项目: <a href="https://github.com/mogoweb/365browser">365browser</a>。在script目录下有从chromium项目同步代码和资源的脚本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromium for Android开源了]]></title>
    <link href="http://mogoweb.net/blog/2015/09/25/chromium-for-android-already-open-source/"/>
    <updated>2015-09-25T09:08:49+08:00</updated>
    <id>http://mogoweb.net/blog/2015/09/25/chromium-for-android-already-open-source</id>
    <content type="html"><![CDATA[<p>最近一段时间都在忙其它的事情，没有关注chromium的最新进展。这几天浏览 <a href="http://www.chromium.org">http://www.chromium.org</a> 上的文档，发现android build目标增加了一个：chrome_public_apk。编译方法：</p>

<blockquote><h1>Build the full browser</h1>

<p>~/chromium/src$ ninja -C out/Release chrome_public_apk</p>

<p>~/chromium/src$ build/android/adb_install_apk.py out/Release/apks/ChromePublic.apk</p></blockquote>

<p>搜索了一下相关新闻，大约在2015年5月份开始，chromium中开始加入了chrome for android的源码。从2012年开始，chromium中开始出现Android的移植代码，但只有Content API和ContentShell，离一个完备的浏览器还有一定的距离。当然，基于Content API开发浏览器也是可行的，当年就是这么干的。Chromium for Android和Chrome for Android并非完全一样，就如同桌面版Chromium浏览器和Chrome浏览器之间的区别。</p>

<p>下面放上一些Chromium for Android浏览器的截图，慢慢品味吧：</p>

<p><img src="http://7d9je4.com1.z0.glb.clouddn.com/mogoweb_2015_chromium_for_android_welcome.png" alt="welcome" /></p>

<p>欢迎界面</p>

<p><img src="http://7d9je4.com1.z0.glb.clouddn.com/mogoweb_2015_chromium_for_android_account.png" alt="account" /></p>

<p>帐号同步界面</p>

<p><img src="http://7d9je4.com1.z0.glb.clouddn.com/mogoweb_2015_chromium_for_android_main.png" alt="main" /></p>

<p>浏览器主界面</p>

<p><img src="http://7d9je4.com1.z0.glb.clouddn.com/mogoweb_2015_chromium_for_android_menu.png" alt="menu" /></p>

<p>浏览器菜单</p>

<p><img src="http://7d9je4.com1.z0.glb.clouddn.com/mogoweb_2015_chromium_for_android_settings.png" alt="settings" /></p>

<p>浏览器设置</p>

<p><img src="http://7d9je4.com1.z0.glb.clouddn.com/mogoweb_2015_chromium_for_android_tabs.png" alt="tabs" /></p>

<p>浏览器标签页</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何打印gyp构建系统中的变量值]]></title>
    <link href="http://mogoweb.net/blog/2015/06/30/how-to-print-variable-of-gyp/"/>
    <updated>2015-06-30T14:16:51+08:00</updated>
    <id>http://mogoweb.net/blog/2015/06/30/how-to-print-variable-of-gyp</id>
    <content type="html"><![CDATA[<p>chromium项目使用了gyp构建系统，gyp的全称是&#8221;Generate Your Projects&#8221;。gyp构建系统使用的并不广泛，目前已知的只有chromium开源项目采用了这一构建系统。官方虽然也有一些文档，但都是一些比较基础的指南，总体来说缺少详细的文档来指导开发人员在项目中使用。
因为研究chromium的缘故，所以对gyp构建系统也有一些了解，在使用中也碰到一些问题，本文所要探讨的是如何输出gyp的变量值。这个问题的场景是这样的：在gyp中定义了变量，但是经过多重gypi包含，在别的gyp文件中可能对变量值进行了赋值。处于调试目的，我们希望输出gyp变量的值。</p>

<p>方法看起来很简单，但也摸索了很久。方法如下，在gyp中合适的位置加入如下代码：</p>

<pre><code>'variables': {
  'mytest': '&lt;!(echo &lt;(variable) 1&gt;&amp;2)',
}
</code></pre>

<p>其中&#8217;mytest&#8217;是我随便定义的一个变量值，variable是希望打印的gyp变量。比如以下语句：</p>

<pre><code>'variables': {
  'mytest': '&lt;!(echo &lt;(OS) 1&gt;&amp;2)',
}
</code></pre>

<p>输出如下结果：</p>

<pre><code>Updating projects from gyp files...
android
gyp: Call to 'echo android 1&gt;&amp;2' returned exit status 0.
</code></pre>

<p>从上面的输出可以看出，OS的变量值为android。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Chromium for Android中能否用TextureView替代SurfaceView]]></title>
    <link href="http://mogoweb.net/blog/2015/06/19/using-textureview-instead-of-surfaceview-in-chrome-for-android/"/>
    <updated>2015-06-19T19:26:45+08:00</updated>
    <id>http://mogoweb.net/blog/2015/06/19/using-textureview-instead-of-surfaceview-in-chrome-for-android</id>
    <content type="html"><![CDATA[<p>在开发Browser 2.0时，碰到一个非常头疼的问题，往布局上添加SurfaceView时，会引起黑屏闪一下。为了解决这个问题，我们不得不在初始化阶段就把SurfaceView添加好，之后也不能调整大小、移动位置。当时就考虑是不是能够用TextureView替代SurfaceView，不过由于计划上的调整，没有做进一步的尝试。今天在网上看到<a href="https://github.com/crosswalk-project/crosswalk-website/wiki/Android-SurfaceView-vs-TextureView">这篇文章</a>，正好解答了我的疑问，在此把文章翻译过来，供参考。</p>

<blockquote><h1>Android SurfaceView和textureView</h1>

<p>本文将简要介绍SurfaceView和TextureView的不同之处</p>

<h2>SurfaceView和TextureView</h2>

<p>SurfaceView和TextureView都继承自android.view.View类，他们都可以在另一个独立线程中绘制和渲染，这是和其它View的最大不同。Crosswalk采用这一分离绘制特性，独立的GPU线程显著提高了渲染效率。</p>

<p>SurfaceView提供一个嵌入在视图层次上的专用绘制表面，您可以控制该表面（Surface）的格式和尺寸。SurfaceView负责将表面放置在屏幕上正确的位置。它的行为多少有些类似于传统桌面系统上的onscreen窗口，比如，X11系统中的XWindow可以是无边框的，嵌入在另一个XWindow中。</p>

<p>SurfaceView存在如下两个缺点：</p>

<ul>
<li>不能应用动画、变换和缩放</li>
<li>不能叠加（Overlay）两个SurfaceView</li>
</ul>


<p>TextureView看似更像一个通用的View，可以应用动画、变换和缩放，就如同TextView。TextureView只能用在硬件加速的窗口。但是，TextureView比SurfaceView更耗内存，而且可能会有1～3帧的延迟，请参考讨论<a href="https://groups.google.com/a/chromium.org/forum/#!topic/graphics-dev/Z0yE-PWQXc4">3</a>。</p>

<h2>使用可以动画的XWalkView</h2>

<p>Crosswalk Embedding API for Android很好的支持了SurfaceView和TextureView。XWalkView缺省使用SurfaceView，也允许您在以下情况下使用TextureView：</p>

<ul>
<li>您想让XWalkView支持动画和变换</li>
<li>您想叠加两个XWalkView</li>
</ul>


<p>设置布尔标识ANIMATIBLE_XWALK_VIEW为true即可启用TextureView。</p>

<ol>
<li><a href="http://developer.android.com/reference/android/view/SurfaceView.html">http://developer.android.com/reference/android/view/SurfaceView.html</a></li>
<li><a href="http://developer.android.com/reference/android/view/TextureView.html">http://developer.android.com/reference/android/view/TextureView.html</a></li>
<li><a href="https://groups.google.com/a/chromium.org/forum/#!topic/graphics-dev/Z0yE-PWQXc4">https://groups.google.com/a/chromium.org/forum/#!topic/graphics-dev/Z0yE-PWQXc4</a></li>
</ol>
</blockquote>

<p>文中提到的讨论起源是在google groups中有人提出如下问题：</p>

<blockquote><p>在当前ContentViewRenderView实现中，使用SurfaceView作为合成表面(compositing surface)，如我们所知，SurfaceView是一个特别的视图，无法进行动画或者变换。</p>

<p>TextureView可以做SufaceView同样的事情，比如，您可以在另一个独立线程中渲染，也可以从底下的SurfaceTexture创建一个egl表面(eglSurface)。更主要的是，TextureView可以进行动画和变换。</p>

<p>我很好奇为什么不使用TextureView作为合成表面，是否TextureView在使用上有一些特别的考虑，比如性能问题？欢迎任何讨论。</p></blockquote>

<p>Google groups有人做如下回复：</p>

<blockquote><p>事实上chrome过去使用TextureView作为合成表面，但我们出于几个原因切换到SurfaceView：</p>

<ul>
<li>由于失效(invalidation)和缓冲的特性，TextureView增加了额外1~3帧的延迟显示画面更新</li>
<li>TextureView总是使用GL合成，而SurfaceTexture可以使用硬件overlay后端，可以占用更少的内存带宽，消耗更少的能量</li>
<li>TextureView的内部缓冲队列导致比SurfaceView使用更多的内存</li>
<li>TextureView的动画和变换能力我们用不上</li>
</ul>
</blockquote>

<p>所以结论是Chromium for Android中可以使用TextureView替代SurfaceView作为合成表面，但带来的后果是占用更多的内存，性能下降。</p>
]]></content>
  </entry>
  
</feed>
