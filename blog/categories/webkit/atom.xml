<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webkit | 放飞梦想]]></title>
  <link href="http://mogoweb.net/blog/categories/webkit/atom.xml" rel="self"/>
  <link href="http://mogoweb.net/"/>
  <updated>2015-11-03T09:42:57+08:00</updated>
  <id>http://mogoweb.net/</id>
  <author>
    <name><![CDATA[mogoweb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WebKit的JavaScript对象扩展]]></title>
    <link href="http://mogoweb.net/blog/2012/01/12/add-javascript-extend-object-for-webkit/"/>
    <updated>2012-01-12T08:59:29+08:00</updated>
    <id>http://mogoweb.net/blog/2012/01/12/add-javascript-extend-object-for-webkit</id>
    <content type="html"><![CDATA[<p>本文的内容主要参考网上收集的资料，不过在Android 4.0 webkit上做扩展时，碰到一些问题，觉得有必要记录下来。</p>

<p>所谓扩展JavaScript对象，就是增加一个JS对象，但它并没有定义在标准的JS对象集合中。如果网页中包含了扩展的JS对象，使用普通的浏览器就会报JS错误。</p>

<p>下面以添加HelloObject对象为例说明具体步骤，该对象具有description属性：</p>

<ul>
<li>添加HelloObject.h, HelloObject.cpp, HelloObject.idl文件，简单起见，将这三个文件放到Source/WebCore/page目录下。</li>
</ul>


<pre><code class="cpp">#ifndef HelloObject_h   
#define HelloObject_h 

#include &lt;wtf/PassRefPtr.h&gt;  
#include &lt;wtf/RefCounted.h&gt;

#include "PlatformString.h"

namespace WebCore { 

class HelloObject : public RefCounted&lt;HelloObject&gt; {   
public:   
    static PassRefPtr&lt;HelloObject&gt; create() { return adoptRef(new HelloObject()); }

    String description() const;
private:
    HelloObject();
};

} // namespace WebCore

#endif // HelloObject_h
</code></pre>

<p><font>HelloObject.h</font></p>

<pre><code class="cpp">#include "config.h"
#include "HelloObject.h"

namespace WebCore { 

HelloObject::HelloObject()   
{   
}

String HelloObject::description() const
{   
    return "Hello Object";   
}

} // namespace WebCore
</code></pre>

<p><font>HelloObject.cpp</font></p>

<pre><code class="idl">module window { 

    interface [OmitConstructor] HelloObject {   
        readonly attribute DOMString description;   
    };
}
</code></pre>

<p><font>HelloObject.idl</font></p>

<ul>
<li>修改Source/WebCore/page/下的DOMWindow.h文件，添加如下声明：</li>
</ul>


<pre><code class="cpp">class HelloObject;

public:
    HelloObject* helloObject() const;
    HelloObject* optionalHelloObject() const { return m_helloObject.get(); }
private:
    mutable RefPtr&lt;HelloObject&gt; m_helloObject;
</code></pre>

<ul>
<li>修改Source/WebCore/page/下的DOMWindow.cpp文件，添加接口实现:</li>
</ul>


<pre><code class="cpp">HelloObject* DOMWindow::helloObject() const
{   
    if (!m_helloObject)   
        m_helloObject = HelloObject::create();   
    return m_helloObject.get();   
}
</code></pre>

<p><font>在DOMWindow::clear()函数中添加一行语句：</font></p>

<pre><code class="cpp">m_helloObject = 0;
</code></pre>

<ul>
<li>修改DOMWindow.idl文件，添加:</li>
</ul>


<pre><code class="idl">attribute [Replaceable] HelloObject helloObject;
</code></pre>

<ul>
<li>接下来需要修改编译系统，让android编译系统编译新增的文件：</li>
</ul>


<p>首先修改Source/WebCore/Android.mk，增加page/HelloObject.cpp到<strong>LOCAL_SRC_FILES</strong>变量，其次需要修改Source/WebCore/Android.derived.v8bindings.mk，增加
$(intermediates)/bindings/V8HelloObject.h到<strong>GEN</strong>变量。（注：这个是必须的，否则就不会根据HelloObject.idl生成V8HelloObject.h文件，在编译时会出错，这也
是折腾了半天得出的成果）</p>

<p>至此，工作基本上完成，待webkit重新编译后，可以用如下的网页进行验证：</p>

<p>&#8220;`html
<html>
<body></p>

<script type="text/javascript">
document.write("<pThis is from HelloObject: ");
document.write(helloObject.description + "</p>");
</script>


<p></body>
</html>
&#8220;`</p>

<p>[参考资料]</p>

<ol>
<li><p><a href="http://blog.csdn.net/perfectpdl/article/details/7051129">webkit的js对象扩展（一）——binding方式创建自定义对象（单实例）</a></p></li>
<li><p><a href="http://blog.csdn.net/perfectpdl/article/details/7058084">android 上 webkit js 本地扩展之全局本地对象实现步骤</a></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
