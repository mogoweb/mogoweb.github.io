<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webkit | 放飞梦想]]></title>
  <link href="http://mogoweb.net/blog/categories/webkit/atom.xml" rel="self"/>
  <link href="http://mogoweb.net/"/>
  <updated>2016-10-19T11:37:33+08:00</updated>
  <id>http://mogoweb.net/</id>
  <author>
    <name><![CDATA[mogoweb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浏览器中实现阅读模式]]></title>
    <link href="http://mogoweb.net/blog/2013/08/30/implement-read-mode-in-browser/"/>
    <updated>2013-08-30T09:06:23+08:00</updated>
    <id>http://mogoweb.net/blog/2013/08/30/implement-read-mode-in-browser</id>
    <content type="html"><![CDATA[<p>这里对阅读模式的定义是：去除网页上与主题内容无关的图片、导航、广告等等，给用户提供一个清爽的网页。在PC浏览器中，chrome/firefox都有这样的扩展/插件。我个人用的最多的是chrome上的<strong>印象笔记.悦读</strong>插件，和evernote整合，非常好用。从IOS 6开始，safari浏览器也提供了<strong>阅读器</strong>功能，用户界面如下：</p>

<p><a href="http://mogoweb.net/wp-content/uploads/2013/08/safari_readmode_1.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="safari_readmode_1" border="0" alt="safari_readmode_1" src="http://mogoweb.net/wp-content/uploads/2013/08/safari_readmode_1_thumb.png" width="274" height="484" /></a> <a href="http://mogoweb.net/wp-content/uploads/2013/08/safari_readmode_2.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="safari_readmode_2" border="0" alt="safari_readmode_2" src="http://mogoweb.net/wp-content/uploads/2013/08/safari_readmode_2_thumb.png" width="274" height="484" /></a></p>

<p>当网页中主题内容比较明确、且文字内容较多时，地址栏上就会出现“阅读器”按钮，点击“阅读器”按钮，就会提供给用户一个清爽的网页。更绝的是，如果网页内容包含多个分页，“阅读器”模式下还可以自动整合，无需费力的点击下一页了，相当贴心，如下图所示：</p>

<p><a href="http://mogoweb.net/wp-content/uploads/2013/08/safari_readmode_3.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="safari_readmode_3" border="0" alt="safari_readmode_3" src="http://mogoweb.net/wp-content/uploads/2013/08/safari_readmode_3_thumb.png" width="274" height="484" /></a></p>

<p>如果要在浏览器中实现这一个功能，可以有三种方法：</p>

<!--excerpt-->


<p>1、服务器端对网页进行处理</p>

<p>其思路和百度转码相同，就是在服务器端对网页进行处理，UC浏览器能够做到省流量，也是采用了这一技术。不过百度转码主要目的是为网页瘦身，所以处理出来的效果惨不忍睹。国外有一家公司，提供了免费的readability API，其口号是：</p>

<blockquote><p>Transforms any article … into a calm, humane, readable experience</p></blockquote>

<p>详情请访问<a href="http://www.readability.com">http://www.readability.com</a>。</p>

<p>使用国外免费的API，实现简单，无需架设服务器，但缺点也是明显的，速度不够理想，容易被墙，说不定哪天就不能使用了。</p>

<p>2、修改webkit，对DOM树进行处理</p>

<p>webkit中，有一个步骤就是解析html，形成DOM树，有了这个DOM树就好办了，有什么节点、节点属性、节点样式都一目了然。所以接下来要做的事情就是筛选主题内容，过滤无关紧要的节点。至于采用什么算法进行筛选，还没有找到现成的C++库，网上有一个C#库：<a href="https://github.com/marek-stoj/NReadability">NReadability</a> 可供参考，如果对javascript比较熟的话，直接参考<a href="https://code.google.com/p/arc90labs-readability/">readability</a>提供的js脚本也可以。</p>

<p>通过修改webkit实现阅读模式，速度快，更容易和浏览器界面进行整合（比如，safari中，只有文字较多的网页才会出现<strong>阅读器</strong>），也比较适合对js前端开发不熟悉的C++程序员，缺点是webkit比较复杂，需要对webkit了解深入，而且之后的维护也是个麻烦事情。</p>

<p>3、注入js，对DOM树进行处理</p>

<p>javascript具有操作DOM的能力，也可以应用样式表来修改节点的样式，所以通过注入JS脚本来实现阅读模式是一个不错的选择。chrome/firefox中扩展插件，或者一种称为<a href="http://zh.wikipedia.org/zh-cn/%E5%B0%8F%E4%B9%A6%E7%AD%BE">bookmarklet</a>的小片代码就是这样实现的。</p>

<p>回到chromium for android，ContentView提供了evaluateJavaScript方法为当前ContentView注入javascript，所以实现起来非常容易。</p>

<h3>TODO</h3>

<p>在safari中，实现了多页拼接的处理。Readability在<a href="http://blog.arc90.com/2010/08/02/readability-updated-to-support-multi-page-articles/">一篇文章</a>中也声明实现了多页合并的处理，不过我对javascript研究的不够多，还没有弄清是如何实现的。如果有精通web前端开发的同学一起探讨，非常欢迎。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebKit的JavaScript对象扩展]]></title>
    <link href="http://mogoweb.net/blog/2012/01/12/add-javascript-extend-object-for-webkit/"/>
    <updated>2012-01-12T08:59:29+08:00</updated>
    <id>http://mogoweb.net/blog/2012/01/12/add-javascript-extend-object-for-webkit</id>
    <content type="html"><![CDATA[<p>本文的内容主要参考网上收集的资料，不过在Android 4.0 webkit上做扩展时，碰到一些问题，觉得有必要记录下来。</p>

<p>所谓扩展JavaScript对象，就是增加一个JS对象，但它并没有定义在标准的JS对象集合中。如果网页中包含了扩展的JS对象，使用普通的浏览器就会报JS错误。</p>

<p>下面以添加HelloObject对象为例说明具体步骤，该对象具有description属性：</p>

<ul>
<li>添加HelloObject.h, HelloObject.cpp, HelloObject.idl文件，简单起见，将这三个文件放到Source/WebCore/page目录下。</li>
</ul>


<pre><code class="cpp">#ifndef HelloObject_h   
#define HelloObject_h 

#include &lt;wtf/PassRefPtr.h&gt;  
#include &lt;wtf/RefCounted.h&gt;

#include "PlatformString.h"

namespace WebCore { 

class HelloObject : public RefCounted&lt;HelloObject&gt; {   
public:   
    static PassRefPtr&lt;HelloObject&gt; create() { return adoptRef(new HelloObject()); }

    String description() const;
private:
    HelloObject();
};

} // namespace WebCore

#endif // HelloObject_h
</code></pre>

<p><font>HelloObject.h</font></p>

<pre><code class="cpp">#include "config.h"
#include "HelloObject.h"

namespace WebCore { 

HelloObject::HelloObject()   
{   
}

String HelloObject::description() const
{   
    return "Hello Object";   
}

} // namespace WebCore
</code></pre>

<p><font>HelloObject.cpp</font></p>

<pre><code class="idl">module window { 

    interface [OmitConstructor] HelloObject {   
        readonly attribute DOMString description;   
    };
}
</code></pre>

<p><font>HelloObject.idl</font></p>

<ul>
<li>修改Source/WebCore/page/下的DOMWindow.h文件，添加如下声明：</li>
</ul>


<pre><code class="cpp">class HelloObject;

public:
    HelloObject* helloObject() const;
    HelloObject* optionalHelloObject() const { return m_helloObject.get(); }
private:
    mutable RefPtr&lt;HelloObject&gt; m_helloObject;
</code></pre>

<ul>
<li>修改Source/WebCore/page/下的DOMWindow.cpp文件，添加接口实现:</li>
</ul>


<pre><code class="cpp">HelloObject* DOMWindow::helloObject() const
{   
    if (!m_helloObject)   
        m_helloObject = HelloObject::create();   
    return m_helloObject.get();   
}
</code></pre>

<p><font>在DOMWindow::clear()函数中添加一行语句：</font></p>

<pre><code class="cpp">m_helloObject = 0;
</code></pre>

<ul>
<li>修改DOMWindow.idl文件，添加:</li>
</ul>


<pre><code class="idl">attribute [Replaceable] HelloObject helloObject;
</code></pre>

<ul>
<li>接下来需要修改编译系统，让android编译系统编译新增的文件：</li>
</ul>


<p>首先修改Source/WebCore/Android.mk，增加page/HelloObject.cpp到<strong>LOCAL_SRC_FILES</strong>变量，其次需要修改Source/WebCore/Android.derived.v8bindings.mk，增加
$(intermediates)/bindings/V8HelloObject.h到<strong>GEN</strong>变量。（注：这个是必须的，否则就不会根据HelloObject.idl生成V8HelloObject.h文件，在编译时会出错，这也
是折腾了半天得出的成果）</p>

<p>至此，工作基本上完成，待webkit重新编译后，可以用如下的网页进行验证：</p>

<p>&#8220;`html
<html>
<body></p>

<script type="text/javascript">
document.write("<pThis is from HelloObject: ");
document.write(helloObject.description + "</p>");
</script>


<p></body>
</html>
&#8220;`</p>

<p>[参考资料]</p>

<ol>
<li><p><a href="http://blog.csdn.net/perfectpdl/article/details/7051129">webkit的js对象扩展（一）——binding方式创建自定义对象（单实例）</a></p></li>
<li><p><a href="http://blog.csdn.net/perfectpdl/article/details/7058084">android 上 webkit js 本地扩展之全局本地对象实现步骤</a></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
